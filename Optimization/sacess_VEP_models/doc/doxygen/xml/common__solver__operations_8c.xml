<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="common__solver__operations_8c" kind="file">
    <compoundname>common_solver_operations.c</compoundname>
    <includes refid="structure__paralleltestbed_8h" local="no">structure_paralleltestbed.h</includes>
    <includes refid="configuration_8h" local="no">configuration.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes refid="def__errors_8h" local="no">def_errors.h</includes>
    <includes local="no">gsl/gsl_rng.h</includes>
    <includes local="no">gsl/gsl_randist.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">limits.h</includes>
    <incdepgraph>
      <node id="245">
        <label>float.h</label>
      </node>
      <node id="233">
        <label>structure_paralleltestbed.h</label>
        <link refid="structure__paralleltestbed_8h_source"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>stdlib.h</label>
      </node>
      <node id="232">
        <label>src/method_module/common_solver_operations.c</label>
        <link refid="common_solver_operations.c"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
      </node>
      <node id="239">
        <label>configuration.h</label>
        <link refid="configuration_8h_source"/>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>limits.h</label>
      </node>
      <node id="243">
        <label>string.h</label>
      </node>
      <node id="238">
        <label>time.h</label>
      </node>
      <node id="240">
        <label>math.h</label>
      </node>
      <node id="246">
        <label>def_errors.h</label>
        <link refid="def__errors_8h_source"/>
      </node>
      <node id="241">
        <label>sys/time.h</label>
      </node>
      <node id="237">
        <label>gsl/gsl_randist.h</label>
      </node>
      <node id="236">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="235">
        <label>AMIGO_problem.h</label>
      </node>
      <node id="234">
        <label>bbobStructures.h</label>
      </node>
      <node id="244">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="common__solver__operations_8c_1a8a11421bed6fc6c204dee4566890bf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logandtranslation_</definition>
        <argsstring>(void *exp1)</argsstring>
        <name>logandtranslation_</name>
        <param>
          <type>void *</type>
          <declname>exp1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="23" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="23" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1af0e88389bd16a054d45f540ca65818ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double calcSD</definition>
        <argsstring>(double mean, double *population, int sizePOPUL)</argsstring>
        <name>calcSD</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>population</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizePOPUL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="77" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a13bd4848275b8e5a3e5383e21b7d5c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double calctime</definition>
        <argsstring>(void *exp, double starttime)</argsstring>
        <name>calctime</name>
        <param>
          <type>void *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>starttime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="89" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="89" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a2977767da7b78e0913ad45e3cfb29318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int returnseedcounter_</definition>
        <argsstring>(void *exp1_)</argsstring>
        <name>returnseedcounter_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="103" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1abcda6250576818763e80983345667678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void returnseed_</definition>
        <argsstring>(void *exp1_, double *seed)</argsstring>
        <name>returnseed_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="110" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a52b4b642f0910b6161f22c79ff2e98b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initrngrandomserial_</definition>
        <argsstring>(void *exp1_)</argsstring>
        <name>initrngrandomserial_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="117" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="117" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a457ffac8bc0066fb97578550c63c5045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initrngrandomparallel_</definition>
        <argsstring>(void *exp1_, int *idp)</argsstring>
        <name>initrngrandomparallel_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="132" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="132" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a9a9db64a35db7a583c764b21bb513689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reinitrngrandomparallel_</definition>
        <argsstring>(void *exp1_, int *idp)</argsstring>
        <name>reinitrngrandomparallel_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="147" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="147" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a6d724878f6ddab44577635e0cceede33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getrngrandomserial_</definition>
        <argsstring>(void *exp1_)</argsstring>
        <name>getrngrandomserial_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="163" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="163" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a9da9b59a3143e0d51c8ef704dbfbdd2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int allocatematrixdouble_</definition>
        <argsstring>(double *vector, int *fil, int *col)</argsstring>
        <name>allocatematrixdouble_</name>
        <param>
          <type>double *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fil</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="173" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1ac7e850d63a125bd84fb1369abc2bb4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converttonormal_</definition>
        <argsstring>(double *vector, int *D)</argsstring>
        <name>converttonormal_</name>
        <param>
          <type>double *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="182" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a08a79ff9cc743a0b24c5d99a4ba089fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converttonormal2_</definition>
        <argsstring>(double *vector, int *D, int *index)</argsstring>
        <name>converttonormal2_</name>
        <param>
          <type>double *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="190" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a71b83e2d4c370e445bb5386ea846c516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converttolog_</definition>
        <argsstring>(double *vector, int *D)</argsstring>
        <name>converttolog_</name>
        <param>
          <type>double *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="202" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a6083c50f0f2eba92b1a4b319c184286a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converttolog2_</definition>
        <argsstring>(double *vector, int *D, int *index)</argsstring>
        <name>converttolog2_</name>
        <param>
          <type>double *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="211" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="211" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1af4a3590e597d7d723c6fc895663a02e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coord_transformation</definition>
        <argsstring>(double *OLD, double *New, int D, double *UB, double *LB)</argsstring>
        <name>coord_transformation</name>
        <param>
          <type>double *</type>
          <declname>OLD</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>New</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>UB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="223" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="223" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a036040c1ce269fcbdb4efc6e7d837a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int extract_worst_index</definition>
        <argsstring>(double *populLocal, int tam, int D)</argsstring>
        <name>extract_worst_index</name>
        <param>
          <type>double *</type>
          <declname>populLocal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="236" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="236" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a911c7812c30b6a9e42ec379e1c91f471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insert_matrix_tabu_list</definition>
        <argsstring>(double *U, double *matrix, int D, int NP, int contador)</argsstring>
        <name>insert_matrix_tabu_list</name>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>contador</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="254" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="254" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1aed5046fdfd5859e35034595a6a1ef290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double calc_euclidean_distance</definition>
        <argsstring>(double *U1, double *U2, int D, double *UB, double *LB)</argsstring>
        <name>calc_euclidean_distance</name>
        <param>
          <type>double *</type>
          <declname>U1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>UB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="269" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="269" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1aabfa6de2a76a3bd4c3cc77a5ca1d7611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initializebenchmarks_</definition>
        <argsstring>(void *exp1_, double *Xl, double *Xm, int *D)</argsstring>
        <name>initializebenchmarks_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="318" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="318" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1ac8486e5f91cbf5fdfc808f5f7cb1a16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initializebenchmarksopenmp_</definition>
        <argsstring>(void *exp1_, double *Xl, double *Xm, int *D, int *idp)</argsstring>
        <name>initializebenchmarksopenmp_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="361" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="361" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a82ed035d4cb94ef002870fec870c51e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sumvar</definition>
        <argsstring>(double *Matriz, int sizeMatriz, int sizeVector)</argsstring>
        <name>sumvar</name>
        <param>
          <type>double *</type>
          <declname>Matriz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeMatriz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="396" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="396" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a2ca46addb6cf0207b748b222a2df3446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int allocate_QuickShort</definition>
        <argsstring>(double *v, int b, int NP, int D)</argsstring>
        <name>allocate_QuickShort</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="440" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="440" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a58c3c956f84750081d76a769bd81c8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* reorderVector_QuickShort</definition>
        <argsstring>(double *v, int b, int NP, int D)</argsstring>
        <name>reorderVector_QuickShort</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="481" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="481" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a60769c326a39799564d46fe98172a69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replaceWorst</definition>
        <argsstring>(double *v, int NP, int D, double *best, int sizeBest)</argsstring>
        <name>replaceWorst</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="495" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="495" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1ab6084a3608f23b926423cb64e18fba66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replaceWorstRecp</definition>
        <argsstring>(double *v, int NP, int D, double *best, int sizeBest, double *LB, double *UB, int rest)</argsstring>
        <name>replaceWorstRecp</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>UB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="513" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="513" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a131fef659ec0ff1cf85914c56f4dd32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replaceRandom</definition>
        <argsstring>(double *v, int NP, int D, double *best, int sizeBest)</argsstring>
        <name>replaceRandom</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="572" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="572" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a4b3f626aa0305ddb2a1236706e403cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void returnBest</definition>
        <argsstring>(double *v, int N, int D, double *best, int sizeBest)</argsstring>
        <name>returnBest</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="608" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="608" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a74a1f31cabf9845bddfc5a5f119ef97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void returnRandom</definition>
        <argsstring>(double *v, int NP, int D, double *best, int sizeBest)</argsstring>
        <name>returnRandom</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="634" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="634" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a4e7be1d7aa5adbbff622ad7c35ac615b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void returnIndv</definition>
        <argsstring>(experiment_total exp1, double *v, int N, int D, double *best, int sizeBest, double *UB, double *LB, int rest)</argsstring>
        <name>returnIndv</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>UB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="716" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="716" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1ada32fd569d23bd309cf41fa72029faba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replaceIndv</definition>
        <argsstring>(experiment_total exp1, double *v, int N, int D, double *worst, int sizeBest, double *Xl, double *Xm, int rest)</argsstring>
        <name>replaceIndv</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>worst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeBest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="737" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="737" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1ab2a4f828f5ae124ffa00977c10c1290b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int extract_best_index</definition>
        <argsstring>(double *populLocal, int tam, int D)</argsstring>
        <name>extract_best_index</name>
        <param>
          <type>double *</type>
          <declname>populLocal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="757" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="757" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a284479c46bec8d7e0071d619cb8170fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reorder_best</definition>
        <argsstring>(double *v, int N, int D)</argsstring>
        <name>reorder_best</name>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="777" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="777" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a612bfd01aebaa060e9066ed8873e3984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long getmaxlong_</definition>
        <argsstring>()</argsstring>
        <name>getmaxlong_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="794" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="794" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="common__solver__operations_8c_1a782a952ce893c4e8cd9bf59f7be588b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setpoint_</definition>
        <argsstring>(double *x)</argsstring>
        <name>setpoint_</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" line="801" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c" bodystart="801" bodyend="1056"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing a set of functions with different purposes: arithmetic operations, management of random numbers, geometrical operations, search algorithms. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David R. Penas </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;structure_paralleltestbed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;configuration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;def_errors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;configuration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_rng.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_randist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logandtranslation_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>point,<sp/>i;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>exp<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>point<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>exp-&gt;test.bench.logindex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(<sp/>exp-&gt;test.bench.dim<sp/>*<sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>exp-&gt;test.bench.dim<sp/>;<sp/>i++)<sp/>exp-&gt;test.bench.logindex[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>exp-&gt;test.bench.translation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((*exp).test._log<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>exp-&gt;test.bench.dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp-&gt;test.bench.min_dom[i]<sp/>&lt;<sp/>0.0<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;test.bench.translation<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;execution.transconst<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(exp-&gt;test.bench.dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp-&gt;execution.idp<sp/>==<sp/>0)&amp;&amp;<sp/>(exp-&gt;test.bench.translation<sp/>==<sp/>1))<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printtranslationmassage();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>exp-&gt;test.bench.dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<sp/>exp-&gt;test.bench.translation<sp/>==<sp/>1)&amp;&amp;(exp-&gt;test.bench.min_dom[i]<sp/>&lt;<sp/>0.0))<sp/>exp-&gt;execution.transconst[i]<sp/>=<sp/>point<sp/><sp/>-<sp/>(exp-&gt;test.bench.min_dom[i]);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<sp/>exp-&gt;test.bench.translation<sp/>==<sp/>1)&amp;&amp;(exp-&gt;test.bench.min_dom[i]<sp/>&gt;=<sp/>0.0))<sp/><sp/>exp-&gt;execution.transconst[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(exp-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp-&gt;execution.transconst[i]<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;test.bench.min_dom[i]<sp/>=<sp/>point;<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;test.bench.max_dom[i]<sp/>=<sp/>exp-&gt;test.bench.max_dom[i]<sp/>+<sp/>exp-&gt;execution.transconst[i];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*exp).test._log<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;test.bench.log_max_dom<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(<sp/>exp-&gt;test.bench.dim*<sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp-&gt;test.bench.log_min_dom<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(<sp/>exp-&gt;test.bench.dim*<sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>exp-&gt;test.bench.dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp-&gt;test.bench.min_dom[i]<sp/>==<sp/>0.0)<sp/>exp-&gt;test.bench.log_min_dom[i]<sp/>=<sp/>log(EPSILON_LOG);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>exp-&gt;test.bench.log_min_dom[i]<sp/>=<sp/>log(exp-&gt;test.bench.min_dom[i]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp-&gt;test.bench.max_dom[i]<sp/>==<sp/>0.0)<sp/>exp-&gt;test.bench.log_max_dom[i]<sp/>=<sp/>log(EPSILON_LOG);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>exp-&gt;test.bench.log_max_dom[i]<sp/>=<sp/>log(exp-&gt;test.bench.max_dom[i]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*exp).test.bench.logindex[i]=1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcSD(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*population,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizePOPUL)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizePOPUL;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>=<sp/>total<sp/>+<sp/>powl(fabsl(population[i]<sp/>-<sp/>mean),<sp/>2.0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>total<sp/>/<sp/>(((double)<sp/>sizePOPUL)<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(total);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calctime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>starttime){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;test.output<sp/>==<sp/>1)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>(double)<sp/>clock();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(current<sp/>-<sp/>starttime)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>returnseedcounter_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;<sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp1[0].contadorseed;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>returnseed_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*seed)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;<sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(seed,<sp/>exp1[0].seed,<sp/>exp1[0].contadorseed<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initrngrandomserial_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>init_seed;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].contadorseed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>init_seed<sp/>=<sp/>time(NULL)<sp/>*<sp/>getpid();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed[0]<sp/><sp/>=<sp/>(double)<sp/>init_seed;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;SERIAL<sp/>SEED<sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].seed[0]<sp/><sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].random<sp/>=<sp/>gsl_rng_alloc<sp/>(gsl_rng_mt19937);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng_set<sp/>(exp1[0].random<sp/>,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>init_seed<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initrngrandomparallel_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>spec;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>init_seed;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].contadorseed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//clock_gettime(CLOCK_REALTIME,<sp/>&amp;spec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>init_seed<sp/>=<sp/>time(NULL)<sp/>*<sp/>(getpid()*(*idp+1))<sp/>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed[0]<sp/><sp/>=<sp/>(double)<sp/>init_seed;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].random<sp/>=<sp/>gsl_rng_alloc<sp/>(gsl_rng_mt19937);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng_set<sp/>(exp1[0].random<sp/>,<sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>init_seed<sp/><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reinitrngrandomparallel_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>init_seed;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].contadorseed<sp/>=<sp/>exp1[0].contadorseed<sp/><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>realloc(exp1[0].seed,<sp/>exp1[0].contadorseed*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>init_seed<sp/>=<sp/>time(NULL)<sp/>*<sp/>((*idp+1))<sp/>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].seed[exp1[0].contadorseed-1]<sp/><sp/>=<sp/>init_seed;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng_free(exp1[0].random);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1[0].random<sp/>=<sp/>gsl_rng_alloc<sp/>(gsl_rng_mt19937);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng_set<sp/>(exp1[0].random<sp/>,<sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>init_seed<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getrngrandomserial_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>gsl_rng_uniform(exp1[0].random);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocatematrixdouble_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fil,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*col)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc((*fil)*(*col)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>converttonormal_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]<sp/>==<sp/>EPSILON_LOG)<sp/>vector[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector[i]<sp/>=<sp/>exp(vector[i]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>converttonormal2_(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index[i]<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]<sp/>==<sp/>EPSILON_LOG)<sp/>vector[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector[i]<sp/>=<sp/>exp(vector[i]);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>converttolog_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]<sp/>==<sp/>0.0)<sp/>vector[i]<sp/>=<sp/>log(EPSILON_LOG);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>vector[i]<sp/>=<sp/>log(vector[i]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>converttolog2_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index[i]<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]<sp/>==<sp/>0.0)<sp/>vector[i]<sp/>=<sp/>log(EPSILON_LOG);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>vector[i]<sp/>=<sp/>log(vector[i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>coord_transformation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*OLD,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*New,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*UB,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LB)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OLD[i]<sp/>==<sp/>LB[i])<sp/>New[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fabs(LB[i])<sp/>+<sp/>fabs(UB[i]))<sp/>==<sp/>0)<sp/>New[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LB[i]<sp/>==<sp/>UB[i])<sp/>New[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>New[i]<sp/>=<sp/>(OLD[i]<sp/>-<sp/>LB[i])<sp/>/<sp/>(fabs(LB[i])<sp/>+<sp/>fabs(UB[i]));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extract_worst_index(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*populLocal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_value;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MIRAMOS<sp/>O<sp/>MELLOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>max_value<sp/>=<sp/>populLocal[0<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tam;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(populLocal[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D]<sp/>&gt;<sp/>max_value)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_value<sp/>=<sp/>populLocal[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert_matrix_tabu_list(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contador)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contador<sp/>&gt;=<sp/>NP)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>extract_worst_index(matrix,<sp/>NP,<sp/>D);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(D<sp/>+<sp/>1);<sp/>i++)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[index<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>i]<sp/>=<sp/>U[i];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(D<sp/>+<sp/>1);<sp/>i++)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[contador<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>i]<sp/>=<sp/>U[i];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calc_euclidean_distance(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*UB,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LB)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U1_NEW,<sp/>*U2_NEW;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*tempU1,<sp/>*tempU2;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>tempU1<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(D*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>tempU2<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(D*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(tempU1,U1,D*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(tempU2,U2,D*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>U1_NEW<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(D*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>U2_NEW<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(D*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>coord_transformation(tempU1,<sp/>U1_NEW,<sp/>D,<sp/>UB,<sp/>LB);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>coord_transformation(tempU2,<sp/>U2_NEW,<sp/>D,<sp/>UB,<sp/>LB);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>pow(U1_NEW[i]<sp/>-<sp/>U2_NEW[i],<sp/>2.0);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempU1!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tempU1);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempU1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempU2!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tempU2);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempU2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U1_NEW<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(U1_NEW);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U1_NEW<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U2_NEW<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(U2_NEW);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U2_NEW<sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(fabs(sum));</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initializebenchmarks_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*noiseBBOB;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*noiselessBBOB;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*system;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*LSGO;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>noiseBBOB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noiseBBOB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>noiselessBBOB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noiselessBBOB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>system<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;systemBiology&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>LSGO<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LSGO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(exp1[0].test.bench.type,<sp/>noiseBBOB)<sp/>==<sp/>0)<sp/>||<sp/>(strcmp(exp1[0].test.bench.type,<sp/>noiselessBBOB)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[0].test.bench.min_dom[0];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[0].test.bench.max_dom[0];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1[0].test.bench.type,<sp/>system)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test._log<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[0].test.bench.min_dom[j];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[0].test.bench.max_dom[j];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[0].test.bench.log_min_dom[j];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[0].test.bench.log_max_dom[j];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(exp1[0].test.bench.type,<sp/>LSGO)<sp/>==<sp/>0)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[0].test.bench.min_dom[0];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[0].test.bench.max_dom[0];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initializebenchmarksopenmp_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*noiseBBOB;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*noiselessBBOB;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*system;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>noiseBBOB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noiseBBOB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>noiselessBBOB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noiselessBBOB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>system<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;systemBiology&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*LSGO;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>LSGO<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LSGO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(exp1[*idp].test.bench.type,<sp/>noiseBBOB)<sp/>==<sp/>0)<sp/>||<sp/>(strcmp(exp1[*idp].test.bench.type,<sp/>noiselessBBOB)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[*idp].test.bench.min_dom[0];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[*idp].test.bench.max_dom[0];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1[*idp].test.bench.type,<sp/>system)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[*idp].test.bench.min_dom[j];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[*idp].test.bench.max_dom[j];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(exp1[0].test.bench.type,<sp/>LSGO)<sp/>==<sp/>0)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>*D;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xl[j]<sp/>=<sp/>(double)<sp/>exp1[*idp].test.bench.min_dom[0];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xm[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>exp1[*idp].test.bench.max_dom[0];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SUM<sp/>VAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumvar(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Matriz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeMatriz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeVector)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vector1,<sp/>*vector_matrices;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg,<sp/>suma,<sp/>varian;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>vector1<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeMatriz*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_matrices<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeVector*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VARIANZAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeVector;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sizeMatriz;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector1[j]<sp/>=<sp/>Matriz[j<sp/>*<sp/>(sizeVector<sp/>+<sp/>1)<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>suma<sp/>+<sp/>vector1[j];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg<sp/>=<sp/>suma<sp/>/<sp/>(double)<sp/>sizeMatriz;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sizeMatriz;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>suma<sp/>+<sp/>powl((vector1[j]<sp/>-<sp/>avg),<sp/>2);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varian<sp/>=<sp/>suma<sp/>/<sp/>(double)<sp/>sizeMatriz;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_matrices[i]<sp/>=<sp/>varian;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SUMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sizeVector;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>suma<sp/>+<sp/>vector_matrices[j];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector1<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vector1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector1<sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector_matrices<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vector_matrices);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_matrices<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsl(suma);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ALLOCATE<sp/>QUICKSHORT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocate_QuickShort(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//z;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivote;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*valor_pivote;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*temp;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>valor_pivote<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D<sp/>+<sp/>1)*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(double));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D<sp/>+<sp/>1)*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(double));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>pivote<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(valor_pivote,<sp/>&amp;v[pivote<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>NP;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D]<sp/>&lt;<sp/>valor_pivote[D])<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivote++;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(temp,&amp;v[i<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[i<sp/>*<sp/>(D<sp/>+<sp/>1)],&amp;v[pivote<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[pivote<sp/>*<sp/>(D<sp/>+<sp/>1)],temp,(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(temp,&amp;v[b<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;v[b<sp/>*<sp/>(D<sp/>+<sp/>1)],&amp;v[pivote<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;v[pivote<sp/>*<sp/>(D<sp/>+<sp/>1)],temp,<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valor_pivote<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(valor_pivote);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valor_pivote=NULL;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=NULL;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pivote;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>REORDER<sp/>QUICK<sp/>SHORT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>reorderVector_QuickShort(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivote;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>NP)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivote<sp/>=<sp/>allocate_QuickShort(v,<sp/>b,<sp/>NP,<sp/>D);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reorderVector_QuickShort(v,<sp/>b,<sp/>pivote<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reorderVector_QuickShort(v,<sp/>pivote<sp/>+<sp/>1,<sp/>NP,<sp/>D);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>REPLACE_WORST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replaceWorst(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>reorderVector_QuickShort(v,<sp/>0,<sp/>NP<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>(NP<sp/>-<sp/>sizeBest);<sp/>i<sp/>&lt;<sp/>NP;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;best[z<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z++;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replaceWorstRecp(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LB,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*UB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rest)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,z,k;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index_state;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U1,<sp/>*U2;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>index_state<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeBest*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>U1<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>U2<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>reorderVector_QuickShort(v,<sp/>0,<sp/>NP<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;sizeBest;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(U1,&amp;best[i<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1-rest)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;NP;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(U2,&amp;v[j<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1-rest)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>calc_euclidean_distance(U1,<sp/>U2,<sp/>D,<sp/>UB,<sp/>LB)<sp/>&lt;=<sp/>1e-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_state[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==NP)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_state[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\nINDEX<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;sizeBest;i++)<sp/><sp/>printf(&quot;<sp/>%d<sp/>&quot;,<sp/>index_state[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\nBEST<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;sizeBest;i++)<sp/><sp/>printf(&quot;<sp/>%lf<sp/>&quot;,<sp/>best[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>z=0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>k=NP-1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>(NP<sp/>-<sp/>sizeBest);<sp/>i<sp/>&lt;<sp/>NP;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_state[z]<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[k<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;best[z<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k--;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z++;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;POPUL<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;NP;i++)<sp/><sp/>printf(&quot;<sp/>%lf<sp/>&quot;,<sp/>v[i<sp/>*<sp/>(D<sp/>+<sp/>1)+D]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\n&quot;);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>free(index_state);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>index_state<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>free(U1);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>U1=NULL;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>free(U2);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>U2=NULL;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>REPLACE<sp/>RANDOM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replaceRandom(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>punto,<sp/>valido;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vector_puntos;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_puntos<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeBest*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeBest;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_puntos[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeBest;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valido<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(valido<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>punto<sp/>=<sp/>(int)<sp/>(NP<sp/>*<sp/>URAND_BBOB);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sizeBest;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(punto<sp/>==<sp/>vector_puntos[j])<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valido<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_puntos[i]<sp/>=<sp/>punto;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(D<sp/>+<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[punto<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>j]<sp/>=<sp/>best[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector_puntos<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vector_puntos);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_puntos=NULL;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>REPLACE<sp/>BEST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>returnBest(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/><sp/>cont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vect;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(N<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(double));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>reorderVector_QuickShort(v,<sp/>0,<sp/>N<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[i<sp/>*<sp/>(D<sp/>+<sp/>1)],&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>cont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(N<sp/>-<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cont<sp/>&lt;<sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;best[cont<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cont++;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free(vect);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vect<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>REPLACE<sp/>RANDOM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>returnRandom(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>punto;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeBest;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>punto<sp/>=<sp/>(int)<sp/>(NP<sp/>*<sp/>URAND_BBOB);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;best[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;v[punto<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>R</highlight></codeline>
<codeline lineno="648"><highlight class="comment">void<sp/>returnBestTabuList(experiment_total<sp/>exp1,<sp/>double<sp/>*v,<sp/>int<sp/>N,<sp/>int<sp/>D,<sp/>double<sp/>*best,<sp/>int<sp/>sizeBest,<sp/>double<sp/>*UB,<sp/>double<sp/>*LB,<sp/>int<sp/>rest)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j,<sp/>cont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>*vect,<sp/>*U1,<sp/>*U2;</highlight></codeline>
<codeline lineno="651"><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>(double<sp/>*)<sp/>malloc(N<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>*<sp/>sizeof<sp/>(double));</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/>U1<sp/>=<sp/>(double<sp/>*)<sp/>malloc((D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/>U2<sp/>=<sp/>(double<sp/>*)<sp/>malloc((D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>reorderVector_QuickShort(v,<sp/>0,<sp/>N<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;v[i<sp/>*<sp/>(D<sp/>+<sp/>1)],&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)],(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/>cont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(N<sp/>-<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(cont<sp/>&lt;<sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(U1,&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1-rest)],(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j=0;<sp/>j&lt;exp1.execution.tabusend.size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(U2,&amp;exp1.execution.tabusend.array[j<sp/>*<sp/>(D<sp/>+<sp/>1-rest)],(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>calc_euclidean_distance(U1,<sp/>U2,<sp/>D,<sp/>UB,<sp/>LB)<sp/>&lt;=<sp/>1e-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(j<sp/>==<sp/>cont)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;best[cont<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cont++;</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>break;</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(cont<sp/>&lt;<sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(U1,<sp/>best,<sp/>(D+1)*sizeof(double));<sp/></highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=cont;i&lt;sizeBest;i++)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;best[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>U1,<sp/>(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;sizeBest;i++)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_matrix_tabu_list(<sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;best[i*(D+1)],<sp/></highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1.execution.tabusend.array,</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D,exp1.execution.tabusend.size,</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1.execution.tabusend.counter);</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="comment"></highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(N<sp/>-<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(cont<sp/>&lt;<sp/>sizeBest)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;best[cont<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>&amp;vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)],<sp/>(D+1)*sizeof(double));</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cont++;</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>break;</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/>free(U1);</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/>U1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/>free(U2);</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/>U2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="713"><highlight class="comment">}</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>returnIndv(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*UB,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rest)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bestword;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*random;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>bestword<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Best&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>random<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Random&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1.par_st-&gt;SelectionPolicy,<sp/>bestword)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returnBest(v,<sp/>N,<sp/>D,<sp/>best,<sp/>sizeBest);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//returnBestTabuList(exp1,v,<sp/>N,<sp/>D,<sp/>best,<sp/>sizeBest,UB,LB,<sp/>rest);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1.par_st-&gt;SelectionPolicy,<sp/>random)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returnRandom(v,<sp/>N,<sp/>D,<sp/>best,<sp/>sizeBest);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(error1);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(2);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replaceIndv(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*worst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeBest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rest)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*worstw;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*random;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>worstw<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Worst&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>random<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Random&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1.par_st-&gt;ReplacePolicy,<sp/>worstw)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceWorst(v,<sp/>N,<sp/>D,<sp/>worst,<sp/>sizeBest);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//replaceWorstRecp(v,<sp/>N,<sp/>D,<sp/>worst,<sp/>sizeBest,Xl,Xm,<sp/>rest);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(exp1.par_st-&gt;ReplacePolicy,<sp/>random)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceRandom(v,<sp/>N,<sp/>D,<sp/>worst,<sp/>sizeBest);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(error2);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(2);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extract_best_index(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*populLocal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_value;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MIRAMOS<sp/>O<sp/>MELLOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>min_value<sp/>=<sp/>populLocal[0<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tam;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(populLocal[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D]<sp/>&lt;<sp/>min_value)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_value<sp/>=<sp/>populLocal[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>D];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reorder_best(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vect;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(N<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(double));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>vect<sp/>=<sp/>reorderVector_QuickShort(v,<sp/>0,<sp/>N<sp/>-<sp/>1,<sp/>D);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(D<sp/>+<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>j]<sp/>=<sp/>vect[i<sp/>*<sp/>(D<sp/>+<sp/>1)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>getmaxlong_(){</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LONG_MAX;</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setpoint_(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>*x){</highlight></codeline>
<codeline lineno="802"><highlight class="normal">x[0]=0.033451;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">x[1]=0.895183;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">x[2]=0.755114;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">x[3]=0.014721;</highlight></codeline>
<codeline lineno="806"><highlight class="normal">x[4]=0.999943;</highlight></codeline>
<codeline lineno="807"><highlight class="normal">x[5]=0.105286;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">x[6]=0.081112;</highlight></codeline>
<codeline lineno="809"><highlight class="normal">x[7]=0.000082;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">x[8]=0.982555;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">x[9]=1.864532;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">x[10]=1.497671;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">x[11]=0.100000;</highlight></codeline>
<codeline lineno="814"><highlight class="normal">x[12]=2.999893;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">x[13]=1.489494;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">x[14]=3.000000;</highlight></codeline>
<codeline lineno="817"><highlight class="normal">x[15]=0.100000;</highlight></codeline>
<codeline lineno="818"><highlight class="normal">x[16]=0.100000;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">x[17]=1.000000;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">x[18]=0.201452;</highlight></codeline>
<codeline lineno="821"><highlight class="normal">x[19]=0.099913;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">x[20]=3.000000;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">x[21]=0.100000;</highlight></codeline>
<codeline lineno="824"><highlight class="normal">x[22]=1.206606;</highlight></codeline>
<codeline lineno="825"><highlight class="normal">x[23]=0.323483;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">x[24]=1.692353;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">x[25]=0.100000;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">x[26]=1.004461;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">x[27]=0.100000;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">x[28]=0.100000;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">x[29]=1.042373;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">x[30]=0.364734;</highlight></codeline>
<codeline lineno="833"><highlight class="normal">x[31]=3.000000;</highlight></codeline>
<codeline lineno="834"><highlight class="normal">x[32]=0.405295;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">x[33]=0.078115;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">x[34]=2.999788;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">x[35]=1.499896;</highlight></codeline>
<codeline lineno="838"><highlight class="normal">x[36]=0.006831;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">x[37]=1.166474;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">x[38]=0.104781;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">x[39]=3.000000;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">x[40]=0.100018;</highlight></codeline>
<codeline lineno="843"><highlight class="normal">x[41]=0.011443;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">x[42]=2.190206;</highlight></codeline>
<codeline lineno="845"><highlight class="normal">x[43]=0.795857;</highlight></codeline>
<codeline lineno="846"><highlight class="normal">x[44]=0.098583;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">x[45]=2.732832;</highlight></codeline>
<codeline lineno="848"><highlight class="normal">x[46]=1.302585;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">x[47]=2.797659;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">x[48]=1.338829;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">x[49]=3.000000;</highlight></codeline>
<codeline lineno="852"><highlight class="normal">x[50]=0.101281;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">x[51]=1.244177;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">x[52]=1.352100;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">x[53]=0.008033;</highlight></codeline>
<codeline lineno="856"><highlight class="normal">x[54]=2.987493;</highlight></codeline>
<codeline lineno="857"><highlight class="normal">x[55]=0.100000;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">x[56]=1.000000;</highlight></codeline>
<codeline lineno="859"><highlight class="normal">x[57]=1.157116;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">x[58]=2.586270;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">x[59]=0.100000;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">x[60]=0.099913;</highlight></codeline>
<codeline lineno="863"><highlight class="normal">x[61]=2.064953;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">x[62]=0.504286;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">x[63]=0.100000;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">x[64]=2.999889;</highlight></codeline>
<codeline lineno="867"><highlight class="normal">x[65]=0.117774;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">x[66]=2.958100;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">x[67]=0.513129;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">x[68]=2.575058;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">x[69]=0.504680;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">x[70]=2.646648;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">x[71]=0.889934;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">x[72]=0.090826;</highlight></codeline>
<codeline lineno="875"><highlight class="normal">x[73]=2.600779;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">x[74]=0.172736;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">x[75]=2.765911;</highlight></codeline>
<codeline lineno="878"><highlight class="normal">x[76]=1.185380;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">x[77]=2.987153;</highlight></codeline>
<codeline lineno="880"><highlight class="normal">x[78]=1.491439;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">x[79]=0.100000;</highlight></codeline>
<codeline lineno="882"><highlight class="normal">x[80]=1.002631;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">x[81]=0.100000;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">x[82]=1.320622;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">x[83]=0.101281;</highlight></codeline>
<codeline lineno="886"><highlight class="normal">x[84]=2.987720;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">x[85]=0.108629;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">x[86]=2.996614;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">x[87]=0.729074;</highlight></codeline>
<codeline lineno="890"><highlight class="normal">x[88]=2.995539;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">x[89]=0.266913;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">x[90]=0.084206;</highlight></codeline>
<codeline lineno="893"><highlight class="normal">x[91]=2.703964;</highlight></codeline>
<codeline lineno="894"><highlight class="normal">x[92]=0.420162;</highlight></codeline>
<codeline lineno="895"><highlight class="normal">x[93]=0.100000;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">x[94]=1.004542;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">x[95]=0.178126;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">x[96]=2.257473;</highlight></codeline>
<codeline lineno="899"><highlight class="normal">x[97]=0.188348;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">x[98]=2.494030;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">x[99]=1.490460;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">x[100]=0.097895;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">x[101]=1.675567;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">x[102]=0.100000;</highlight></codeline>
<codeline lineno="905"><highlight class="normal">x[103]=0.054985;</highlight></codeline>
<codeline lineno="906"><highlight class="normal">x[104]=2.999894;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">x[105]=0.882348;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">x[106]=1.000000;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">x[107]=0.100000;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">x[108]=0.015688;</highlight></codeline>
<codeline lineno="911"><highlight class="normal">x[109]=2.955229;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">x[110]=0.317292;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">x[111]=2.997790;</highlight></codeline>
<codeline lineno="914"><highlight class="normal">x[112]=0.140812;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">x[113]=0.100000;</highlight></codeline>
<codeline lineno="916"><highlight class="normal">x[114]=2.936550;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">x[115]=0.190130;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">x[116]=1.503120;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">x[117]=0.161634;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">x[118]=2.495773;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">x[119]=1.254092;</highlight></codeline>
<codeline lineno="922"><highlight class="normal">x[120]=0.100000;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">x[121]=3.000000;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">x[122]=0.305996;</highlight></codeline>
<codeline lineno="925"><highlight class="normal">x[123]=3.000000;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">x[124]=0.262628;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">x[125]=1.078525;</highlight></codeline>
<codeline lineno="928"><highlight class="normal">x[126]=0.120045;</highlight></codeline>
<codeline lineno="929"><highlight class="normal">x[127]=0.100000;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">x[128]=1.228515;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">x[129]=1.477455;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">x[130]=0.008562;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">x[131]=3.000000;</highlight></codeline>
<codeline lineno="934"><highlight class="normal">x[132]=0.260938;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">x[133]=2.017894;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">x[134]=0.126150;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">x[135]=0.100000;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">x[136]=2.867177;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">x[137]=0.327551;</highlight></codeline>
<codeline lineno="940"><highlight class="normal">x[138]=1.196621;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">x[139]=0.480832;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">x[140]=0.005000;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">x[141]=2.998170;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">x[142]=0.184825;</highlight></codeline>
<codeline lineno="945"><highlight class="normal">x[143]=0.005000;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">x[144]=1.000000;</highlight></codeline>
<codeline lineno="947"><highlight class="normal">x[145]=0.000000;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">x[146]=1.000000;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">x[147]=1.000000;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">x[148]=1.000000;</highlight></codeline>
<codeline lineno="951"><highlight class="normal">x[149]=0.000000;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">x[150]=0.000000;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">x[151]=0.000000;</highlight></codeline>
<codeline lineno="954"><highlight class="normal">x[152]=0.000000;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">x[153]=0.000000;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">x[154]=0.000000;</highlight></codeline>
<codeline lineno="957"><highlight class="normal">x[155]=1.000000;</highlight></codeline>
<codeline lineno="958"><highlight class="normal">x[156]=0.000000;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">x[157]=1.000000;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">x[158]=1.000000;</highlight></codeline>
<codeline lineno="961"><highlight class="normal">x[159]=1.000000;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">x[160]=0.000000;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">x[161]=1.000000;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">x[162]=0.000000;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">x[163]=0.000000;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">x[164]=1.000000;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">x[165]=1.000000;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">x[166]=1.000000;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">x[167]=0.000000;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">x[168]=0.000000;</highlight></codeline>
<codeline lineno="971"><highlight class="normal">x[169]=0.000000;</highlight></codeline>
<codeline lineno="972"><highlight class="normal">x[170]=1.000000;</highlight></codeline>
<codeline lineno="973"><highlight class="normal">x[171]=0.000000;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">x[172]=0.000000;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">x[173]=0.000000;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">x[174]=0.000000;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">x[175]=0.000000;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">x[176]=0.000000;</highlight></codeline>
<codeline lineno="979"><highlight class="normal">x[177]=0.000000;</highlight></codeline>
<codeline lineno="980"><highlight class="normal">x[178]=0.000000;</highlight></codeline>
<codeline lineno="981"><highlight class="normal">x[179]=0.000000;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">x[180]=1.000000;</highlight></codeline>
<codeline lineno="983"><highlight class="normal">x[181]=1.000000;</highlight></codeline>
<codeline lineno="984"><highlight class="normal">x[182]=0.000000;</highlight></codeline>
<codeline lineno="985"><highlight class="normal">x[183]=1.000000;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">x[184]=1.000000;</highlight></codeline>
<codeline lineno="987"><highlight class="normal">x[185]=1.000000;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">x[186]=1.000000;</highlight></codeline>
<codeline lineno="989"><highlight class="normal">x[187]=1.000000;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">x[188]=0.000000;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">x[189]=0.000000;</highlight></codeline>
<codeline lineno="992"><highlight class="normal">x[190]=0.000000;</highlight></codeline>
<codeline lineno="993"><highlight class="normal">x[191]=0.000000;</highlight></codeline>
<codeline lineno="994"><highlight class="normal">x[192]=1.000000;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">x[193]=0.000000;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">x[194]=1.000000;</highlight></codeline>
<codeline lineno="997"><highlight class="normal">x[195]=0.000000;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">x[196]=0.000000;</highlight></codeline>
<codeline lineno="999"><highlight class="normal">x[197]=0.000000;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">x[198]=0.000000;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">x[199]=0.000000;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">x[200]=0.000000;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">x[201]=1.000000;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">x[202]=1.000000;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">x[203]=0.000000;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">x[204]=0.000000;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">x[205]=0.000000;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">x[206]=0.000000;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">x[207]=0.000000;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">x[208]=0.000000;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">x[209]=0.000000;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">x[210]=1.000000;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">x[211]=0.000000;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">x[212]=1.000000;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">x[213]=1.000000;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">x[214]=1.000000;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">x[215]=1.000000;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">x[216]=1.000000;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">x[217]=0.000000;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">x[218]=1.000000;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">x[219]=1.000000;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">x[220]=0.000000;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">x[221]=0.000000;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">x[222]=0.000000;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">x[223]=0.000000;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">x[224]=1.000000;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">x[225]=0.000000;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">x[226]=1.000000;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">x[227]=0.000000;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">x[228]=0.000000;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">x[229]=0.000000;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">x[230]=0.000000;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">x[231]=0.000000;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">x[232]=1.000000;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">x[233]=0.000000;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">x[234]=0.000000;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">x[235]=1.000000;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">x[236]=1.000000;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">x[237]=1.000000;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">x[238]=1.000000;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">x[239]=0.000000;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">x[240]=0.000000;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">x[241]=0.000000;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">x[242]=0.000000;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">x[243]=1.000000;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">x[244]=0.000000;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">x[245]=1.000000;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">x[246]=0.000000;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">x[247]=0.000000;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">x[248]=1.000000;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">x[249]=0.000000;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">x[250]=1.000000;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">x[251]=1.000000;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">x[252]=1.000000;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/common_solver_operations.c"/>
  </compounddef>
</doxygen>
