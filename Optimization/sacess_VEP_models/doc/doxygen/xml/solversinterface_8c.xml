<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="solversinterface_8c" kind="file">
    <compoundname>solversinterface.c</compoundname>
    <includes refid="structure__paralleltestbed_8h" local="no">structure_paralleltestbed.h</includes>
    <includes refid="evaluationinterface_8h" local="no">evaluationinterface.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="299">
        <label>structure_paralleltestbed.h</label>
        <link refid="structure__paralleltestbed_8h_source"/>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="306">
        <label>string.h</label>
      </node>
      <node id="298">
        <label>src/method_module/solversinterface.c</label>
        <link refid="solversinterface.c"/>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="305">
        <label>evaluationinterface.h</label>
        <link refid="evaluationinterface_8h_source"/>
      </node>
      <node id="304">
        <label>time.h</label>
      </node>
      <node id="303">
        <label>gsl/gsl_randist.h</label>
      </node>
      <node id="302">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="301">
        <label>AMIGO_problem.h</label>
      </node>
      <node id="300">
        <label>bbobStructures.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="solversinterface_8c_1a4d00a321ac12ca219253f2c0aced275e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int execute_Solver</definition>
        <argsstring>(experiment_total *exp1, result_solver *result, void *(*function)(double *, void *))</argsstring>
        <name>execute_Solver</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp1</declname>
        </param>
        <param>
          <type><ref refid="structresult__solver" kindref="compound">result_solver</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" line="19" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" bodystart="19" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="solversinterface_8c_1a217b6125237e8ef1d704593f4cbf995a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int execute_parallel_solver</definition>
        <argsstring>(experiment_total *exp, result_solver *result, long maxfunevals, void *(*function)(double *, void *))</argsstring>
        <name>execute_parallel_solver</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structresult__solver" kindref="compound">result_solver</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>long</type>
          <declname>maxfunevals</declname>
        </param>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" line="36" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" bodystart="36" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="solversinterface_8c_1a5ae0d1faee214a00603d4ba5c62ad9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int execute_serial_solver</definition>
        <argsstring>(experiment_total *exp, result_solver *result, long maxfunevals, void *(*function)(double *, void *))</argsstring>
        <name>execute_serial_solver</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structresult__solver" kindref="compound">result_solver</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>long</type>
          <declname>maxfunevals</declname>
        </param>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" line="96" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c" bodystart="96" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;structure_paralleltestbed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;evaluationinterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENMP</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>execute_Solver(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1,<sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*(*</highlight><highlight class="keyword">function</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isparallel;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxfunevals;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>maxfunevals<sp/>=<sp/>(long)<sp/>(*exp1).test.max_eval;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(is_parallel(*exp1))<sp/>isparallel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>isparallel<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isparallel<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>execute_parallel_solver(exp1,<sp/>result,maxfunevals,<sp/>(*exp1).test.VTR,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>execute_serial_solver(exp1,<sp/>result,maxfunevals,<sp/>(*exp1).test.VTR,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>execute_parallel_solver(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp,<sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxfunevals,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*(*</highlight><highlight class="keyword">function</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/>i,<sp/>idsolver;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>exp-&gt;execution.idp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmark;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>benchmark<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENMP</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp[0].par_st-&gt;NPROC_OPENMP<sp/>=<sp/>omp_get_max_threads();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*exp).methodScatterSearch<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>idsolver<sp/>=<sp/>getnumversion(exp);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idsolver<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNU</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>__modcess_MOD_cess((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(INTEL)</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>modcess_mp_cess_((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idsolver<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNU</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>__modacessdist_MOD_acessdist((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(INTEL)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>modacessdist_mp_acessdist_((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idsolver<sp/>==<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNU</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>__modsacess_MOD_sacess((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(INTEL)</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>modsacess_mp_sacess_((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idsolver<sp/>==<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNU</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>__modessm_MOD_essm((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(INTEL)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>modessm_mp_essm_((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>execute_serial_solver(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp,<sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxfunevals,<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*(*</highlight><highlight class="keyword">function</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*exp).methodScatterSearch<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNU</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>__scattersearch_MOD_sscattersearch((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(INTEL)</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>scattersearch_mp_sscattersearch_((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>exp,<sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>result,<sp/>&amp;maxfunevals,<sp/>&amp;(*exp).test.VTR);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/solversinterface.c"/>
  </compounddef>
</doxygen>
