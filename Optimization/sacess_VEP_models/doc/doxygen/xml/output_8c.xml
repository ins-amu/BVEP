<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="output_8c" kind="file">
    <compoundname>output.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="structure__paralleltestbed_8h" local="no">structure_paralleltestbed.h</includes>
    <includes refid="configuration_8h" local="no">configuration.h</includes>
    <includes refid="read__a__file__line__by__line_8h" local="no">read_a_file_line_by_line.h</includes>
    <includes refid="common__solver__operations_8h" local="no">common_solver_operations.h</includes>
    <includes local="no">hdf5.h</includes>
    <includes refid="benchmark__functions__SystemBiology_8h" local="no">benchmark_functions_SystemBiology.h</includes>
    <incdepgraph>
      <node id="363">
        <label>structure_paralleltestbed.h</label>
        <link refid="structure__paralleltestbed_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
      </node>
      <node id="360">
        <label>stdlib.h</label>
      </node>
      <node id="358">
        <label>src/output/output.c</label>
        <link refid="output.c"/>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>stddef.h</label>
      </node>
      <node id="375">
        <label>benchmark_functions_SystemBiology.h</label>
        <link refid="benchmark__functions__SystemBiology_8h_source"/>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
      </node>
      <node id="368">
        <label>configuration.h</label>
        <link refid="configuration_8h_source"/>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="371">
        <label>read_a_file_line_by_line.h</label>
        <link refid="read__a__file__line__by__line_8h_source"/>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
      </node>
      <node id="373">
        <label>common_solver_operations.h</label>
        <link refid="common__solver__operations_8h_source"/>
        <childnode refid="363" relation="include">
        </childnode>
      </node>
      <node id="362">
        <label>string.h</label>
      </node>
      <node id="374">
        <label>hdf5.h</label>
      </node>
      <node id="361">
        <label>time.h</label>
      </node>
      <node id="369">
        <label>math.h</label>
      </node>
      <node id="370">
        <label>sys/time.h</label>
      </node>
      <node id="367">
        <label>gsl/gsl_randist.h</label>
      </node>
      <node id="366">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="365">
        <label>AMIGO_problem.h</label>
      </node>
      <node id="364">
        <label>bbobStructures.h</label>
      </node>
      <node id="359">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="output_8c_1a522fe4a0b125e2f3046c83673e07dfad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printtranslationmassage</definition>
        <argsstring>()</argsstring>
        <name>printtranslationmassage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="22" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a5b2cd9f9c9f7a2327d104b3b68b3a9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initprintfile_</definition>
        <argsstring>(void *exp1_, double *best, int *par, int *idp, double *currenttime, long *evals, int *master)</argsstring>
        <name>initprintfile_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evals</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>master</declname>
        </param>
        <briefdescription>
<para>this procedure initialize the differents output files of the program. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>best</parametername>
</parameternamelist>
<parameterdescription>
<para>fx value of the best solution of the processor up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the program is parallel, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idp</parametername>
</parameternamelist>
<parameterdescription>
<para>identification of the parallel processor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>current iterations of the solver. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>master</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the processors is the master, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="39" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="39" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ad86a241fae644a8e4a022d61c167b35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printiterationcesslog_</definition>
        <argsstring>(void *exp1_, double *best, long *evaluation_local, double *currenttime, int *ite)</argsstring>
        <name>printiterationcesslog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation_local</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ite</declname>
        </param>
        <briefdescription>
<para>print current results in the logfile </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>best</parametername>
</parameternamelist>
<parameterdescription>
<para>fx value of the best solution of the processor up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the program is parallel, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluation_local</parametername>
</parameternamelist>
<parameterdescription>
<para>function evaluations spent by the processor up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="153" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="152" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a93f375b3861f85504e19f48e80317644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printdescartsolution_</definition>
        <argsstring>(void *exp1_, double *fpen, int *idp)</argsstring>
        <name>printdescartsolution_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="178" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="178" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a269ea36b3b13633ee82de240a784bada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printinititeration_</definition>
        <argsstring>(void *exp1_, int *iter, double *cputime3)</argsstring>
        <name>printinititeration_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>cputime3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="194" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="194" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a749db12403198755c8be45bbc6200cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printlsinitlog_</definition>
        <argsstring>(void *exp1_, double *best)</argsstring>
        <name>printlsinitlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="212" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="212" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a517f264c299a92319a7efb8948fd71fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printlocalsolverinsert_</definition>
        <argsstring>(void *exp1_, double *valor, double *localmatrix, int *sizelocal, int *exito, double *comp1, double *comp2)</argsstring>
        <name>printlocalsolverinsert_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>valor</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>localmatrix</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sizelocal</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exito</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>comp2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="232" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="232" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a020b5632fabd635de219219b23d44abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printinitlocalsolverinsert_</definition>
        <argsstring>(void *exp1_, double *valor, double *localmatrix, int *sizelocal)</argsstring>
        <name>printinitlocalsolverinsert_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>valor</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>localmatrix</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sizelocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="262" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="262" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ac98885eeaef74602ee18212f373f959a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printlsendlog_</definition>
        <argsstring>(void *exp1_, double *best, double *currenttime, long *evals)</argsstring>
        <name>printlsendlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="285" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="285" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a186ed8d78491d1986bc9993cde5b6010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printadaptation_</definition>
        <argsstring>(void *exp1_, double *balance, int *dim, int *counter, double *time)</argsstring>
        <name>printadaptation_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>balance</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="305" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="305" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a06a05749c71235d447276f317348bd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printadaptationslave_</definition>
        <argsstring>(void *exp1_, int *recp, int *send, long *diff_evals, double *time)</argsstring>
        <name>printadaptationslave_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>recp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>send</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>diff_evals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="325" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="325" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a24fe86fdd62f457f30df4ed85cf65003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printadaptationmaster_</definition>
        <argsstring>(void *exp1_, int *origin, int *dest, double *balance, int *dim, int *counter, int *accept, int *adap, double *time)</argsstring>
        <name>printadaptationmaster_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>balance</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>accept</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>adap</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="345" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="345" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a193c9cd5a085ff3d6a48cb3ae761370c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printadaptationscores_</definition>
        <argsstring>(void *exp1_, double *scores, int *NPROC)</argsstring>
        <name>printadaptationscores_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>scores</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NPROC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="379" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="379" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ac08b37143fe814a847f6ff50e0793765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printdesadaptationmaster_</definition>
        <argsstring>(void *exp1_, int *origin, int *dest, double *balance, int *dim, int *counter, double *time)</argsstring>
        <name>printdesadaptationmaster_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>balance</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="403" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="403" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a5577b8878708b49776d51017ad085d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printputmasterlog_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time, int *id)</argsstring>
        <name>printputmasterlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="490" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="490" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ab7dd4e30140a362c1db6bf66ae9d035c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printputcheckmasterlog_</definition>
        <argsstring>(void *exp1_, double *new, double *old)</argsstring>
        <name>printputcheckmasterlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>old</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="505" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="505" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1aac7b8fe13fb7d3cd0d71c547814aa4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printreturnselectsolution_</definition>
        <argsstring>(void *exp1_, double *fpen, double *oldvalue, double *currenttime, int *idp)</argsstring>
        <name>printreturnselectsolution_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>oldvalue</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="520" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="520" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a9b502a12bbfd391789a19e0e1b9decc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printcheckvtr_</definition>
        <argsstring>(void *exp1_, double *best, long *evals, double *currenttime, double *vtr)</argsstring>
        <name>printcheckvtr_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="535" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="535" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a6ccd69b4d87da0bfb98f15bdd976efc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printrecvmasterlog_</definition>
        <argsstring>(void *exp1_, double *fpen, double *oldvalue, double *currenttime, int *idp)</argsstring>
        <name>printrecvmasterlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>oldvalue</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="558" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="558" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1adbe2473bde18120690dee1c27e399b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printputmasterendlog_</definition>
        <argsstring>(void *exp1_, double *time, double *currenttime, double *valuecandidate, int *idp)</argsstring>
        <name>printputmasterendlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>valuecandidate</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="573" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="573" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ab2d087bb37fca6875f0a627e3b4ad252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printcooperative_</definition>
        <argsstring>(void *exp1_, int *cooperative, int *size, double *time, int *iter)</argsstring>
        <name>printcooperative_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cooperative</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="588" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="588" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1aa46a54f14ad45c618d978218a72fb6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printrefset_</definition>
        <argsstring>(void *exp1_, double *refset, int *size, double *time, int *iter, int *index)</argsstring>
        <name>printrefset_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>refset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="610" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="610" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a6b6d542d89c535446dccd5b7b52cb6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printrefsetinner_</definition>
        <argsstring>(void *exp1_, double *refset, int *size, double *balance)</argsstring>
        <name>printrefsetinner_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>refset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>balance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="639" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="639" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1af3021dc42864149887e827e9c1218261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printchilds_</definition>
        <argsstring>(void *exp1_, double *refset, double *childset, int *sizechild, int *childsetindex, int *childsetindex2)</argsstring>
        <name>printchilds_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>refset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>childset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sizechild</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>childsetindex</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>childsetindex2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="661" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="661" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a7654640ba9324a2f6a9d1859d814dc86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printenditeration_</definition>
        <argsstring>(void *exp1_)</argsstring>
        <name>printenditeration_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="682" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="682" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a86d0bf8d3be1fc639445e449e2113e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printrestart_</definition>
        <argsstring>(void *exp1_, double *time)</argsstring>
        <name>printrestart_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="699" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="699" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a2d82f9dfa0e78cd8ba21857ee2c046f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printrestartslave_</definition>
        <argsstring>(void *exp1_, double *time)</argsstring>
        <name>printrestartslave_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="713" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="713" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a6f9a66093444da1274f7363c2a866641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printreplaceslavelog_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time, int *position)</argsstring>
        <name>printreplaceslavelog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="727" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="727" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a8c53e40be39d48df1d5ff6e85f3df4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printreceivedslave_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time)</argsstring>
        <name>printreceivedslave_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="742" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="742" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a09ad6f7f749144c60af4e74989bc0f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printdiscardreceivedslave_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time, double *fbest)</argsstring>
        <name>printdiscardreceivedslave_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fbest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="757" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="757" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1abf0c3c5cb726a08e65be88c72b0684a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printdiscardreceivedslave3_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time, double *fbest)</argsstring>
        <name>printdiscardreceivedslave3_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fbest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="772" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="772" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a02156537c37d03ad4a381b8a58b69ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printstuck_</definition>
        <argsstring>(void *exp1_, double *solution, int *ocurrence)</argsstring>
        <name>printstuck_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ocurrence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="787" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="787" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a88cf0e4ac12e34157da00f4f8a9614dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printdiscardreceivedslave2_</definition>
        <argsstring>(void *exp1_, double *fpen, double *time, double *porc)</argsstring>
        <name>printdiscardreceivedslave2_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fpen</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>porc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="804" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="804" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a8ffc87a96b850e446650ddd68043ea65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printcomparenewsolutionslavelog_</definition>
        <argsstring>(void *exp1_, double *new, double *old, double *dist, double *time, double *th)</argsstring>
        <name>printcomparenewsolutionslavelog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>th</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="819" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="819" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a9c7b74557b11580ca65e1d49573023d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printreceptioncompare_</definition>
        <argsstring>(void *exp1_, double *new, double *old, double *dist, double *time, double *maxthreshold)</argsstring>
        <name>printreceptioncompare_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>maxthreshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="835" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="835" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1aa6d312bc065a82aaa414a77b00c57a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printcomparenewsolutionmasterlog_</definition>
        <argsstring>(void *exp1_, double *new, double *old, double *dist, double *time, double *maxthreshold)</argsstring>
        <name>printcomparenewsolutionmasterlog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>maxthreshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="851" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="851" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a9cbd14663dd746e56d4a1dd0e7207b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printfinalsendslavelog_</definition>
        <argsstring>(void *exp1_, double *new, double *time)</argsstring>
        <name>printfinalsendslavelog_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>new</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="867" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="867" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a4708df1c4f5c2a7cdca2a990cd9bd6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printiteration_</definition>
        <argsstring>(void *exp1_, int *k, double *best, long *evaluation_local, double *currenttime)</argsstring>
        <name>printiteration_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation_local</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <briefdescription>
<para>print iteration in output files. This files are used to generate the final Matlab graphs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>iteration spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>best</parametername>
</parameternamelist>
<parameterdescription>
<para>best solution up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluation_local</parametername>
</parameternamelist>
<parameterdescription>
<para>function evaluations spent by the processor up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="896" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="895" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a5329543bd132e25f864a73b8c793e0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printgant_</definition>
        <argsstring>(void *exp1_, double *currenttime, int *code)</argsstring>
        <name>printgant_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>print results in gant files. This files are used to generate the Gant char. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>inner code to represent the kind of operation: (1) global search, (2) local search, (3) communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="934" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="934" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a4f2a780b3897b104079d9cdae9f483a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printpercentage_</definition>
        <argsstring>(void *exp1_, double *currenttime, double *value, double *percentage)</argsstring>
        <name>printpercentage_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>percentage</declname>
        </param>
        <briefdescription>
<para>print results in percentage files. This files are used to generate the percentages char. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the solution sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percentage</parametername>
</parameternamelist>
<parameterdescription>
<para>percentage of improvement. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="966" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="966" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a1800a3c0346c0d41f05cf1742e225636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printiterationcess_</definition>
        <argsstring>(void *exp1_, double *best, long *evaluation_local, double *currenttime, int *locals, int *migration)</argsstring>
        <name>printiterationcess_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation_local</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>currenttime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>locals</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>migration</declname>
        </param>
        <briefdescription>
<para>print results in percentage files. This files are used to generate the percentages char. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>best</parametername>
</parameternamelist>
<parameterdescription>
<para>best solution up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluation_local</parametername>
</parameternamelist>
<parameterdescription>
<para>function evaluations spent by the processor up to now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currenttime</parametername>
</parameternamelist>
<parameterdescription>
<para>time spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locals</parametername>
</parameternamelist>
<parameterdescription>
<para>number of local solver calls spent from the beginning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>migration</parametername>
</parameternamelist>
<parameterdescription>
<para>number of migration performed up to now. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1003" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1002" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ac12eea0e8f91c3176940aa6418fd9794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printverboselocaloutput_</definition>
        <argsstring>(void *exp1_, int *D, double *U, double *fval, int *idp)</argsstring>
        <name>printverboselocaloutput_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1039" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1039" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ae7ba6dc36e3e209cd0853edc29a69030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printverboselocaloutput2_</definition>
        <argsstring>(void *exp1_, double *fval, int *idp)</argsstring>
        <name>printverboselocaloutput2_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1056" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1056" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ad26e8efc552ffd611cbd35957f014494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void improvelocalsolver_</definition>
        <argsstring>(void *exp1_, double *fval, double *fvalold)</argsstring>
        <name>improvelocalsolver_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fvalold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1081" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1081" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a01a5f587211fade38af99603075f9eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_verbose_local_success</definition>
        <argsstring>(experiment_total exp1, int success)</argsstring>
        <name>print_verbose_local_success</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>success</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1102" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1102" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a911953377fc0d8c05e87941b02f1dcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_end_file_</definition>
        <argsstring>(experiment_total *exp1, double *U, double *best, result_solver *result)</argsstring>
        <name>print_end_file_</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type><ref refid="structresult__solver" kindref="compound">result_solver</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1112" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1112" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a126cb59f899f83336aded80fcd6996fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void verboseiteration_</definition>
        <argsstring>(void *exp1_, int k, double starttime, double ftarget, double best, long evaluation_local, int idp)</argsstring>
        <name>verboseiteration_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double</type>
          <declname>starttime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ftarget</declname>
        </param>
        <param>
          <type>double</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long</type>
          <declname>evaluation_local</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1142" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1142" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a853128c51468badb9a206890b94eda7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void verboseiterationfortran_</definition>
        <argsstring>(void *exp1_, int *k, double *time, double *ftarget, double *best, long *evaluation_local, int *par, int *idp)</argsstring>
        <name>verboseiterationfortran_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ftarget</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation_local</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1164" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1164" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a921fbd5192ab5e589653190358ba4cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* concat_char</definition>
        <argsstring>(int *BUFFER, char *string_eval_total, char *string_eval)</argsstring>
        <name>concat_char</name>
        <param>
          <type>int *</type>
          <declname>BUFFER</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>string_eval_total</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>string_eval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1182" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1182" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a54380285235446c723a50c9f87e4c182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matlab_plot_file</definition>
        <argsstring>(experiment_total exp1, char *string, char *string2, const char *color, int ancho_linea, const char *marca, int par, int idp, int NPROC, int func, int end, int initp)</argsstring>
        <name>matlab_plot_file</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>string2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ancho_linea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>marca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NPROC</declname>
        </param>
        <param>
          <type>int</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initp</declname>
        </param>
        <briefdescription>
<para>this function generates a convergence MATLAB graph with the files of all slaves. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>void pointer for the main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>path of the convergence output graph of the master. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string2</parametername>
</parameternamelist>
<parameterdescription>
<para>path of the convergence output graph of the spacific slave. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>char variable for color lines. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ancho_linea</parametername>
</parameternamelist>
<parameterdescription>
<para>char variable for line width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>marca</parametername>
</parameternamelist>
<parameterdescription>
<para>char variable for the mark graph. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the program is parallel, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idp</parametername>
</parameternamelist>
<parameterdescription>
<para>identification number of the processors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPROC</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of processors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if it is the fisrt time to enter in this function, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the specific slave is the last, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initp</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 indicates the id, where the program are going to begin to print the stairs matlab function; 0 in the opposite case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1228" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1227" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a55724ace6b0223bf52db02d683ea4ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matlab_plot_file_gant</definition>
        <argsstring>(experiment_total exp1, int init1, int end, char *stringpath, int maxsize)</argsstring>
        <name>matlab_plot_file_gant</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>init1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>stringpath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxsize</declname>
        </param>
        <briefdescription>
<para>this function generates a gantt char with the gantt files of all slaves. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1</parametername>
</parameternamelist>
<parameterdescription>
<para>main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init1</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if it is the fisrt time to enter in this function, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the specific slave is the last, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stringpath</parametername>
</parameternamelist>
<parameterdescription>
<para>path to print the matlab code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxsize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows of the gantt file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1542" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1542" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a70a4ee926f202ec19934f92aabc8352f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matlab_plot_file_porcentage</definition>
        <argsstring>(experiment_total exp1, int end, char *stringpath, int idppar)</argsstring>
        <name>matlab_plot_file_porcentage</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>stringpath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idppar</declname>
        </param>
        <briefdescription>
<para>this function generates a percentage char with the percentege output files of all slaves. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1</parametername>
</parameternamelist>
<parameterdescription>
<para>main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the specific slave is the last, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stringpath</parametername>
</parameternamelist>
<parameterdescription>
<para>path to print the matlab code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idppar</parametername>
</parameternamelist>
<parameterdescription>
<para>identification number of the processor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1726" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1726" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a11eaa07380d9c9209c43c060555384b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int row_count</definition>
        <argsstring>(char *stringpath)</argsstring>
        <name>row_count</name>
        <param>
          <type>char *</type>
          <declname>stringpath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1813" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1813" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a71369262bde662ceefae8dff853cbf1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double varianze</definition>
        <argsstring>(double *array, double avg, int size)</argsstring>
        <name>varianze</name>
        <param>
          <type>double *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>avg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1900" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1900" bodyend="1911"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a9a37bc3db6b474100cb09d7309580b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char select_color</definition>
        <argsstring>(int i)</argsstring>
        <name>select_color</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1913" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1913" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a2f94f2fda29c95d92ec430adfec90de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char select_marca</definition>
        <argsstring>(int i)</argsstring>
        <name>select_marca</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1936" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1936" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plot_file</definition>
        <argsstring>(experiment_total exp1, int par, int idp, int NPROC)</argsstring>
        <name>plot_file</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NPROC</declname>
        </param>
        <briefdescription>
<para>this function generate a convergence MATLAB graph with the files of all slaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="1967" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="1967" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1af4fb1023d4ddf652a5e703f951162ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plot_file_cess</definition>
        <argsstring>(experiment_total exp1, int par, int idp, int NPROC)</argsstring>
        <name>plot_file_cess</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref></type>
          <declname>exp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NPROC</declname>
        </param>
        <briefdescription>
<para>this function manages the generation of the differents graphs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1</parametername>
</parameternamelist>
<parameterdescription>
<para>main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>binary parametter: 1 if the program is parallel, 0 in the opposite case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idp</parametername>
</parameternamelist>
<parameterdescription>
<para>identification number of the processors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPROC</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of processors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2074" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2074" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a8cb42609f32ea4133abf1a47b40b0ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initoutputvars_</definition>
        <argsstring>(void *exp1_)</argsstring>
        <name>initoutputvars_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2186" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2186" bodyend="2202"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a0351026a18ba429e97ba878dd903e80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateresultsandprint_</definition>
        <argsstring>(void *exp1_, void *result_, double *totaltime, long *evaluation, double *fx, double *xbest)</argsstring>
        <name>updateresultsandprint_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>result_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xbest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2206" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2206" bodyend="2303"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1aa372305a3f4e17bdb2400b8c1915435f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateresultsess_</definition>
        <argsstring>(void *exp1_, void *result_, double *totaltime, long *evaluation, double *fx, double *xbest, double *totaliter, double *timevtr)</argsstring>
        <name>updateresultsess_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>result_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evaluation</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xbest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>totaliter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>timevtr</declname>
        </param>
        <briefdescription>
<para>this function gathers the different results of all processors in the master, and then the master diffuses this information to the slaves. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp1_</parametername>
</parameternamelist>
<parameterdescription>
<para>main struct <ref refid="structexperiment__total" kindref="compound">experiment_total</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_</parametername>
</parameternamelist>
<parameterdescription>
<para>result struct. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totaltime</parametername>
</parameternamelist>
<parameterdescription>
<para>total time spents by the program. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluation</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of evaluations spents by the program. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fx</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the objective function of the best solution for each slave. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xbest</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of the best solution for each slave. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totaliter</parametername>
</parameternamelist>
<parameterdescription>
<para>otal iteration spents by the solver. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timevtr</parametername>
</parameternamelist>
<parameterdescription>
<para>time to reach to VTR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2321" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2320" bodyend="2429"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ab450f6b2be085a733cf9abd5a5ba0ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int updateresultsrandomsearch_</definition>
        <argsstring>(void *exp1_, void *result_, double *totaltime, double *evaluation, double *best)</argsstring>
        <name>updateresultsrandomsearch_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>result_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>evaluation</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>best</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2434" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2434" bodyend="2444"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1ad55597f6edd107f5a735a9f0ce84eee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_message</definition>
        <argsstring>(int NPROC, experiment_total *exp, int NTHREAD)</argsstring>
        <name>init_message</name>
        <param>
          <type>int</type>
          <declname>NPROC</declname>
        </param>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NTHREAD</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2449" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2449" bodyend="2479"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a5843057016c99e224d6b5be29c5b2415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bechmark_message</definition>
        <argsstring>(experiment_total *exp, const char *name)</argsstring>
        <name>bechmark_message</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2483" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2483" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1affd4b6aff6c94d0934cddd9f5804b07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphs_message</definition>
        <argsstring>(experiment_total *exp)</argsstring>
        <name>graphs_message</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2495" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2495" bodyend="2523"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a757719405d5f31206573100d84adb545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printresults_</definition>
        <argsstring>(void *exp1_, double *fx, long *evals, double *totaltime, double *timeVTR, double *iter)</argsstring>
        <name>printresults_</name>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>evals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>timeVTR</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2526" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2526" bodyend="2533"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a754e5b2bc2dbe1a90a4c449f7fbe729a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printstatemaster_</definition>
        <argsstring>(double *BKS, double *time)</argsstring>
        <name>printstatemaster_</name>
        <param>
          <type>double *</type>
          <declname>BKS</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2537" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2537" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a84d53a5580356e2389e4636a93cb01d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printresults_end</definition>
        <argsstring>(experiment_total *exptotal, result_solver result)</argsstring>
        <name>printresults_end</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exptotal</declname>
        </param>
        <param>
          <type><ref refid="structresult__solver" kindref="compound">result_solver</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2542" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2542" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="output_8c_1a5d8bb67710fcaa8ed1fcbc7acb3fbfa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plot</definition>
        <argsstring>(experiment_total *exptotal)</argsstring>
        <name>plot</name>
        <param>
          <type><ref refid="structexperiment__total" kindref="compound">experiment_total</ref> *</type>
          <declname>exptotal</declname>
        </param>
        <briefdescription>
<para>this function generate a convergence MATLAB graph with the files of all slaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" line="2577" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c" bodystart="2577" bodyend="2607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing all functions about the different outputs of the program: print screens, files logs, matlab files generation etc. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David R. Penas </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;structure_paralleltestbed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;configuration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;read_a_file_line_by_line.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;common_solver_operations.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hdf5.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;benchmark_functions_SystemBiology.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;mpi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printtranslationmassage()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*<sp/>TRANSLACION<sp/>ENABLED:<sp/>logarithmic<sp/>space<sp/>is<sp/>enabled<sp/>and<sp/>there<sp/>are<sp/>negative<sp/>values<sp/>in<sp/>the<sp/>bounds\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="output_8c_1a5b2cd9f9c9f7a2327d104b3b68b3a9ce" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a5b2cd9f9c9f7a2327d104b3b68b3a9ce" kindref="member" tooltip="this procedure initialize the differents output files of the program.">initprintfile_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*par,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evals,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*master)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cadea2;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3,<sp/>*p4,<sp/>*p5,<sp/>*p6;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>cadea2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(400*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>(*output).st3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;point1<sp/>=<sp/>*currenttime;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>initp=0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>p5<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;oldbest<sp/>=<sp/>*best;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*par<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.log_output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(500,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.result_output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(500,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.output_graph,<sp/></highlight><highlight class="stringliteral">&quot;%s/convergence_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,*idp);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_graph,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].execution.initpath<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initp=1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.initpath<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.log_output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(500,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.log_percentage<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(100,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.output_gant_log<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(100,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.result_output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(500,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.result_output,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/result&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.log_output,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/logfile_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,*idp);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*idp<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.log_percentage,<sp/></highlight><highlight class="stringliteral">&quot;%s/percentage_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,*idp);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.output_gant_log,</highlight><highlight class="stringliteral">&quot;%s/gantt_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,*idp);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*master<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*idp<sp/>!=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.output_graph,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/convergence_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,<sp/>*idp);<sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(exp1[0].test.output_graph,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/convergence_id%d.csv&quot;</highlight><highlight class="normal">,<sp/>exp1[0].test.output_graph,<sp/>*idp);<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_graph,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>fopen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p5<sp/>=<sp/>fopen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_percentage,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p6<sp/>=<sp/>fopen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_gant_log,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*master<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*idp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p3<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;Time,BestFx,N_evals,N_Call_Local_solver,N_Migration\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%.20lf,%ld,0,0\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*best,<sp/>*evals);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p3<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;Time,BestFx,N_evals,N_Call_Local_solver,N_Migration\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%.20lf,%ld,0,0\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*best,<sp/>*evals);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*idp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p5<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p5,<sp/></highlight><highlight class="stringliteral">&quot;Time,BestFx,Percentage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p5);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p5<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p6<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p6<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p6,<sp/></highlight><highlight class="stringliteral">&quot;Time,State\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p6);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p6<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p4<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p4);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="output_8c_1ad86a241fae644a8e4a022d61c167b35b" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1ad86a241fae644a8e4a022d61c167b35b" kindref="member" tooltip="print current results in the logfile">printiterationcesslog_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation_local,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ite)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;ID[%d]<sp/>-<sp/>Iteration:<sp/>%d<sp/>NFunEvals:<sp/>%ld<sp/>Bestf:<sp/>%lf<sp/>CURRENT<sp/>TIME:<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,exp1[0].execution.idp,<sp/>*ite,<sp/>*evaluation_local,*best,<sp/>*currenttime<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printdescartsolution_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>-<sp/>discart<sp/>solution<sp/><sp/>%lf<sp/>from<sp/>%d<sp/>processor<sp/>in<sp/>reception<sp/>subroutine\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*idp<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printinititeration_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*iter,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*cputime3)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\n+++ID[%d]<sp/>---<sp/>INIT<sp/>ITERATION<sp/>%d<sp/>-<sp/>CURRENT<sp/>TIME:<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,exp1[0].execution.idp,<sp/>*iter+1,<sp/><sp/>*cputime3<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printlsinitlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>LOCAL<sp/>SOLVER<sp/>-<sp/>Call<sp/>local<sp/>solver:<sp/>Initial<sp/>point<sp/>function<sp/>value:<sp/>[%lf]<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*best<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printlocalsolverinsert_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*valor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*localmatrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sizelocal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*exito,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*comp1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*comp2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*exito<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>LOCAL<sp/>SOLVER<sp/>-<sp/>Point<sp/>%lf<sp/>is<sp/>NOT<sp/>put<sp/>in<sp/>refset.<sp/>[NEW<sp/>%lf<sp/>compare<sp/>with<sp/>OLD<sp/>%lf].<sp/>It<sp/>is<sp/>near<sp/>to<sp/>the<sp/>set<sp/>LOCAL_SOLVER_TABU_LIST<sp/>:<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*valor,<sp/>*comp1,<sp/>*comp2<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;*sizelocal;i++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,&quot;<sp/>%lf<sp/>&quot;,<sp/>localmatrix[i]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;***]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>LOCAL<sp/>SOLVER<sp/>-<sp/>Point<sp/>%lf<sp/>is<sp/>put<sp/>in<sp/>refset.<sp/>[NEW<sp/>%lf<sp/>compare<sp/>with<sp/>OLD<sp/>%lf].<sp/>LOCAL_SOLVER_TABU_LIST<sp/>:<sp/><sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*valor,<sp/>*comp1,<sp/>*comp2);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;*sizelocal;i++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,&quot;<sp/>%lf<sp/>&quot;,<sp/>localmatrix[i]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;***]\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printinitlocalsolverinsert_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*valor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*localmatrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sizelocal<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>LOCAL<sp/>SOLVER<sp/>-<sp/>Init<sp/>point<sp/>X0<sp/>%lf<sp/>is<sp/>put<sp/>in<sp/>INITIAL_POINTS_TABU_LIST<sp/>:<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*valor<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;i&lt;*sizelocal;i++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,&quot;<sp/>%lf<sp/>&quot;,<sp/>localmatrix[i]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;***]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printlsendlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>LOCAL<sp/>SOLVER<sp/>-<sp/>OUTPUT:<sp/>Local<sp/>solution<sp/>function<sp/>value:<sp/>[%lf]<sp/>-<sp/>%lf<sp/>seconds<sp/>spent<sp/>in<sp/>local<sp/>solver<sp/>-<sp/>%ld<sp/>evals<sp/>\n&quot;</highlight><highlight class="normal">,exp1[0].execution.idp,*best,<sp/>*currenttime,<sp/>*evals<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printadaptation_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*counter,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>ADAPTING<sp/>THREAD<sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printadaptationslave_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*recp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*send,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*diff_evals,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>ADAPTING<sp/>SIGNAL<sp/>TO<sp/>MASTER<sp/>--<sp/>recv<sp/>sol<sp/>%d<sp/>send<sp/>sol<sp/>%d<sp/>diff-evals<sp/>%ld<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*recp,<sp/>*send,<sp/>*diff_evals,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printadaptationmaster_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*counter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*accept,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*adap,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*accept<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*adap<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>ADAPTING<sp/>THREAD<sp/>%d<sp/>[RECV&gt;SEND]<sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>[best<sp/>id<sp/>%d]<sp/>[ACCEPT]<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*origin,<sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*dest,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*adap<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>ADAPTING<sp/>THREAD<sp/>%d<sp/>[MAXEVALSx2]<sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>[best<sp/>id<sp/>%d]<sp/>[ACCEPT]<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*origin,<sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*dest,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*adap<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>ADAPTING<sp/>THREAD<sp/>%d<sp/>[MAXEVALS&amp;SEND=0]<sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>[best<sp/>id<sp/>%d]<sp/>[ACCEPT]<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*origin,<sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*dest,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>ADAPTING<sp/>THREAD<sp/>%d<sp/><sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>[best<sp/>id<sp/>%d]<sp/>[REJECT]<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*origin,<sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*dest,<sp/>*time<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printadaptationscores_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*scores,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*NPROC)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>ADAPTING<sp/>SCORES:<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>proc(%d)=<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,i+1,scores[i]);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printdesadaptationmaster_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*counter,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>SEND<sp/>(DES)ADAPTING<sp/>THREAD<sp/>%d<sp/><sp/>--<sp/>new<sp/>balance<sp/>%lf,<sp/>new<sp/>size<sp/>of<sp/>refset<sp/>%d,<sp/>new<sp/>ncounter<sp/>%d<sp/>[best<sp/>id<sp/>%d]<sp/>-<sp/>TIME[%lf]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/><sp/>*origin,<sp/>*balance,<sp/>*dim,<sp/>*counter,<sp/>*dest,<sp/>*time<sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="437"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printmasterocurrencesend_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*masterslave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dim_refset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>cont;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n2_vector;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dim_refset_vector;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance_vector;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizelocal;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>n2_vector<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(*size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>dim_refset_vector<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(*size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>balance_vector<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(*size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>sizelocal=1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>cooperativegathertelementint_(exp1,<sp/>dim_refset,<sp/>&amp;sizelocal,<sp/>dim_refset_vector);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>cooperativegathertelementint_(exp1,<sp/>n2,<sp/>&amp;sizelocal,<sp/>n2_vector);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>cooperativegathertelement_(exp1,<sp/>balance,<sp/>&amp;sizelocal,<sp/>balance_vector);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].execution.idp<sp/>==<sp/>0<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\nID[%d]<sp/>-<sp/>MASTER<sp/>:<sp/><sp/>contributions<sp/>of<sp/>solutions<sp/>per<sp/>procesor<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp<sp/><sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;*size-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*masterslave<sp/>==<sp/>1<sp/>)<sp/>cont<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>cont<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tPROCESOR<sp/>%d<sp/>---&gt;<sp/>%d<sp/>submitted<sp/>solutions\n&quot;</highlight><highlight class="normal">,cont,<sp/>vector[cont]<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;*size-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*masterslave<sp/>==<sp/>1<sp/>)<sp/>cont=i+1;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>cont=0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tCONFIGURATION<sp/>PROCESOR<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cont);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>---<sp/>DIM_REFSET<sp/>%d<sp/><sp/><sp/>ITERATIONS<sp/>BEFORE<sp/>TO<sp/>ENTER<sp/>IN<sp/>LOCAL<sp/>SOLVER<sp/>%d<sp/><sp/><sp/>BALANCE<sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>dim_refset_vector[cont],<sp/>n2_vector[cont],<sp/>balance_vector[cont]<sp/><sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>free(n2_vector);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>free(dim_refset_vector);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>free(balance_vector);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printputmasterlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>MASTER<sp/>-<sp/>the<sp/>new<sp/>data<sp/>%lf<sp/>(from<sp/>processor<sp/>%d)<sp/>is<sp/>put<sp/>in<sp/>the<sp/>slaves<sp/><sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printputcheckmasterlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*old<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;ID[%d]<sp/>-<sp/>MASTER<sp/>-check<sp/>if<sp/>new<sp/>value<sp/>%lf<sp/>is<sp/>better<sp/>than<sp/>%lf<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>*old<sp/><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printreturnselectsolution_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*oldvalue,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;ID[%d]<sp/>-<sp/>RECEPTION<sp/>-<sp/>New<sp/>solution<sp/>chooses<sp/>in<sp/>reception<sp/><sp/>%lf<sp/>from<sp/>%d<sp/>processor<sp/>compares<sp/>with<sp/>current<sp/>best<sp/>%lf<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*idp,<sp/>*oldvalue,<sp/>*currenttime<sp/><sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printcheckvtr_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evals,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vtr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp1[0].test.VTR<sp/>&gt;=<sp/>*best)<sp/><sp/>&amp;&amp;<sp/><sp/>(<sp/>exp1[0].test.jfprint<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*vtr<sp/>=<sp/>*currenttime;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.jfprint<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[SLAVE<sp/>ID=%d]<sp/>fx<sp/>=<sp/>%.10lf<sp/>&lt;<sp/>VTR<sp/>=%.10lf<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*best,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].test.VTR,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*currenttime);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\nID[%d]<sp/>-<sp/>FJ<sp/>OVERCOME<sp/>-<sp/>value<sp/>%lf<sp/>-<sp/>evals<sp/>%ld<sp/><sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*best,<sp/>*evals,<sp/>*currenttime<sp/><sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printrecvmasterlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*oldvalue,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>MASTER<sp/>-<sp/>New<sp/>solution<sp/>received<sp/>%lf<sp/>from<sp/>%d<sp/>processor<sp/>compares<sp/>with<sp/>current<sp/>best<sp/>%lf<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*idp,<sp/>*oldvalue,<sp/>*currenttime<sp/><sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printputmasterendlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*valuecandidate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;ID[%d]<sp/>-<sp/>MASTER<sp/>ACCEPT<sp/>CANDIDATE<sp/>FROM<sp/>%d<sp/>-<sp/>fx<sp/>candidate<sp/>%lf<sp/>-<sp/>%lf<sp/>seconds<sp/>spent<sp/>in<sp/>the<sp/>last<sp/>put<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*idp,<sp/>*valuecandidate,<sp/>*time,<sp/>*currenttime<sp/><sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printcooperative_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*cooperative,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*iter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>COOPERATIVE<sp/>FLAG<sp/>-<sp/>Content<sp/>of<sp/>the<sp/>cooperative<sp/>flag<sp/>iter<sp/>%d<sp/>-<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*iter,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*size;i++)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\t\t<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>cooperative[i]<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>==<sp/>9)<sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>!=<sp/>0)<sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printrefset_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*refset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*iter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>REFSET<sp/>FVAL<sp/>-<sp/>Content<sp/>of<sp/>the<sp/>Refset<sp/>in<sp/>the<sp/>end<sp/>of<sp/>iteration<sp/>%d<sp/>-<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*iter,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*size;i++)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\t\t<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>refset[i]<sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>==<sp/>9)<sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>!=<sp/>0)<sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>INDEX<sp/>CHANGE<sp/>COUNTER<sp/>-<sp/>end<sp/>iteration<sp/>%d<sp/>-<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*iter,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*size;i++)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\t\t<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>index[i]<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>==<sp/>9)<sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>!=<sp/>0)<sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printrefsetinner_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*refset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*balance<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>REFSET<sp/>FVAL<sp/>(balance<sp/>%lf)-<sp/>Content<sp/>of<sp/>the<sp/>Refset:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*balance<sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*size;i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\t\t<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>refset[i]<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>==<sp/>9)<sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>!=<sp/>0)<sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printchilds_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*refset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*childset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sizechild,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*childsetindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*childsetindex2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>CHILDSET<sp/>FVAL<sp/>-<sp/>Content<sp/>of<sp/>the<sp/>childset:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp<sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;*sizechild;i++)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\t\t<sp/>%lf<sp/>(%d<sp/>-<sp/>%lf<sp/>&lt;&gt;<sp/>%d<sp/>-<sp/>%lf)\n&quot;</highlight><highlight class="normal">,<sp/>childset[i],<sp/>childsetindex[i]-1,<sp/>refset[childsetindex[i]-1],<sp/>childsetindex2[i]-1,<sp/>refset[childsetindex2[i]-1]<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%10<sp/>!=<sp/>0)<sp/><sp/>fprintf(p3,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printenditeration_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\n+++ID[%d]<sp/>-<sp/>END<sp/>ITERATION\n\n\n&quot;</highlight><highlight class="normal">,<sp/><sp/>exp1[0].execution.idp<sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printrestart_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RESTART<sp/>SENT<sp/>SIGNAL<sp/>-<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printrestartslave_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RESTART<sp/>BEGINS<sp/>-<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printreplaceslavelog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*position<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>-<sp/>ACCEPTED<sp/>-<sp/><sp/>received<sp/>data<sp/>is<sp/>introduced<sp/>in<sp/>refset<sp/>-<sp/>%lf<sp/>-<sp/>in<sp/>position<sp/>%d<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*position,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printreceivedslave_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>-<sp/><sp/><sp/>Candidate_from_Master<sp/>%lf<sp/>is<sp/>received<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>sec\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/><sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printdiscardreceivedslave_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fbest<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>NOT<sp/>ACCEPTED<sp/>-<sp/><sp/><sp/>Candidate_from_Master<sp/>%lf<sp/>is<sp/>discard<sp/>:<sp/>there<sp/>is<sp/>a<sp/>better<sp/>solution<sp/>in<sp/>REFSET<sp/>%lf<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>sec\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/><sp/>*fbest,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printdiscardreceivedslave3_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fbest<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>NOT<sp/>ACCEPTED<sp/>-<sp/><sp/><sp/>Candidate_from_Master<sp/>%lf<sp/>is<sp/>discard<sp/>:<sp/>this<sp/>solution<sp/>is<sp/>the<sp/>same<sp/>than<sp/>the<sp/>last<sp/>sent<sp/>%lf<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>sec\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/><sp/>*fbest,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printstuck_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*solution,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ocurrence<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RESTART<sp/>SOLUTION<sp/>--&gt;<sp/>%lf<sp/>-<sp/>iterations<sp/>without<sp/>changes<sp/>--&gt;<sp/>%d<sp/>\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/>*solution,<sp/>*ocurrence<sp/><sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printdiscardreceivedslave2_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fpen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*porc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>RECEPTION<sp/>NOT<sp/>ACCEPTED<sp/>-<sp/><sp/><sp/>Candidate_from_Master<sp/>%lf<sp/>is<sp/>discard<sp/>-<sp/>it<sp/>does<sp/>not<sp/>improve<sp/>enough<sp/>(%lf)<sp/>---<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>sec\n&quot;</highlight><highlight class="normal">,<sp/>exp1[0].execution.idp,<sp/>*fpen,<sp/>*porc,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printcomparenewsolutionslavelog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*old,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dist,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*th<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>CHECK<sp/>TO<sp/>SEND<sp/><sp/>-<sp/>compared<sp/>BKS_S<sp/>%lf<sp/>with<sp/>BKS_M<sp/>%lf<sp/>---&gt;<sp/>improving<sp/>%lf<sp/>%%<sp/>(threshold<sp/>%lf)<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>*old,<sp/>*dist,<sp/>*th,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printreceptioncompare_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*old,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dist,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*maxthreshold<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>COMPARATION<sp/>SOLUTIONS<sp/>IN<sp/>RECEPTION<sp/>-<sp/>compared<sp/>candidate<sp/>value<sp/>%lf<sp/>with<sp/>fbest<sp/>value<sp/>%lf<sp/>---&gt;<sp/>improving<sp/>%lf<sp/>%%<sp/>(min<sp/>%lf%%)<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>*old,<sp/>*dist,<sp/>*maxthreshold,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printcomparenewsolutionmasterlog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*old,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dist,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*maxthreshold<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\tID[%d]<sp/>-<sp/>COMPARATION<sp/>SOLUTIONS<sp/>-<sp/>compared<sp/>candidate<sp/>value<sp/>%lf<sp/>with<sp/>best<sp/>know<sp/>value<sp/>%lf<sp/>---&gt;<sp/>improving<sp/>%lf<sp/>%%<sp/>(min<sp/>%lf%%)<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>*old,<sp/>*dist,<sp/>*maxthreshold,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printfinalsendslavelog_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_output,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;\n\tID[%d]<sp/>-<sp/>ASYNCH<sp/>SEND<sp/>-<sp/>slave<sp/>final<sp/>send<sp/>---&gt;<sp/>%lf<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp1[0].execution.idp,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>*time<sp/><sp/>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="output_8c_1a4708df1c4f5c2a7cdca2a990cd9bd6a7" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a4708df1c4f5c2a7cdca2a990cd9bd6a7" kindref="member" tooltip="print iteration in output files. This files are used to generate the final Matlab graphs...">printiteration_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation_local,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_graph,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*best<sp/>&lt;<sp/>output-&gt;oldbest<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.output_stop<sp/>!=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%.20lf,%ld,0,0\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*best,<sp/>*evaluation_local);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.VTR<sp/>&gt;=<sp/>*best<sp/>)<sp/>exp1[0].test.output_stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;oldbest<sp/>=<sp/>*best;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="output_8c_1a5329543bd132e25f864a73b8c793e0f6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a5329543bd132e25f864a73b8c793e0f6" kindref="member" tooltip="print results in gant files. This files are used to generate the Gant char.">printgant_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*code)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_gant_log,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%ld\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*code);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="output_8c_1a4f2a780b3897b104079d9cdae9f483a0" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a4f2a780b3897b104079d9cdae9f483a0" kindref="member" tooltip="print results in percentage files. This files are used to generate the percentages char...">printpercentage_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*percentage)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.log_percentage,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%lf,%lf\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*value,<sp/>*percentage);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002" refid="output_8c_1a1800a3c0346c0d41f05cf1742e225636" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a1800a3c0346c0d41f05cf1742e225636" kindref="member" tooltip="print results in percentage files. This files are used to generate the percentages char...">printiterationcess_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation_local,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*currenttime,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*locals,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*migration)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>exp1[0].test.output_graph,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*best<sp/>&lt;<sp/>output-&gt;oldbest<sp/>)<sp/>&amp;&amp;<sp/>((*locals<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(*migration<sp/>==<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.output_stop<sp/>!=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%.20lf,%ld,0,0\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*best,<sp/>*evaluation_local);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.VTR<sp/>&gt;=<sp/>*best<sp/>)<sp/>exp1[0].test.output_stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;oldbest<sp/>=<sp/>*best;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*locals<sp/>&gt;<sp/>0)<sp/>||<sp/>(*migration<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.output_stop<sp/>!=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p3,<sp/></highlight><highlight class="stringliteral">&quot;%.20lf,%.20lf,%ld,%d,%d\n&quot;</highlight><highlight class="normal">,<sp/>*currenttime,<sp/>*best,<sp/>*evaluation_local,<sp/>*locals,<sp/>*migration);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1[0].test.VTR<sp/>&gt;=<sp/>*best<sp/>)<sp/>exp1[0].test.output_stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printverboselocaloutput_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fval,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;test.verbose<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output).st1<sp/>=<sp/>MPI_Wtime();</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output).st1<sp/>=<sp/>clock();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1052"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printverboselocaloutput2_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_local_solver;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>time_local_solver<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;test.verbose<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output).st2<sp/>=<sp/>MPI_Wtime();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_local_solver<sp/>=<sp/>(double)<sp/>((*output).st2<sp/>-<sp/>(*output).st1);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output).st2<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_local_solver<sp/>=<sp/>((double)<sp/>((*output).st2<sp/>-<sp/>(*output).st1)<sp/>/<sp/>(double)<sp/>CLOCKS_PER_SEC);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*output).st3<sp/>=<sp/>(*output).st3<sp/>+<sp/>time_local_solver;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>improvelocalsolver_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fvalold<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlocal__solver" kindref="compound">local_solver</ref><sp/>*local_s;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>local_s<sp/>=<sp/>exp1-&gt;ls;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*fval<sp/>&lt;<sp/>*fvalold)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).state_ls<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).total_local<sp/>=(*local_s).total_local<sp/><sp/>+1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).sucess_local=(*local_s).sucess_local<sp/>+1;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).num_ls++;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).sucess_interval++;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).state_ls<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).num_ls++;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*local_s).total_local++;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_verbose_local_success(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>success)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1.test.verbose<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Exito.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>falla\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_end_file_(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>D,<sp/>idp;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlocal__solver" kindref="compound">local_solver</ref><sp/>*local_s;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>exp1-&gt;test.bench.dim;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>idp<sp/>=<sp/>exp1-&gt;execution.idp;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>local_s<sp/>=<sp/>exp1-&gt;ls;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test.verbose<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(idp<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;Numero<sp/>de<sp/>chamadas<sp/>solver<sp/>local<sp/>%.5lf<sp/>(Exitos:<sp/>%.5lf)<sp/>tempo<sp/>gastado<sp/>--&gt;<sp/>%.20lf\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_s-&gt;total_local,<sp/>local_s-&gt;sucess_local,<sp/>(*output).st3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;\nBEST<sp/>SOLUTION:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FOR<sp/>DIFERENTIAL<sp/>EVOLUTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;methodDE<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test._log<sp/><sp/>==<sp/>1)<sp/>converttonormal_(U,&amp;D);<sp/></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;\t%.30lf\n&quot;</highlight><highlight class="normal">,<sp/>U[i]);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;f(x)=%.30lf\n&quot;</highlight><highlight class="normal">,<sp/>*best);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verboseiteration_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>starttime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ftarget,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>evaluation_local,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mediumTime;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;test.verbose<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediumTime<sp/>=<sp/>(double)<sp/>MPI_Wtime();</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d-iteracion<sp/>%d<sp/>best-coste<sp/>%.10lf<sp/>evals<sp/>%.1ld<sp/>--<sp/>TIME<sp/>%.10lf<sp/>s<sp/>--<sp/>ftarget<sp/>%.20lf\n\n&quot;</highlight><highlight class="normal">,<sp/>idp,<sp/>k,<sp/>best,<sp/>evaluation_local,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(mediumTime<sp/>-<sp/>starttime),<sp/>ftarget);<sp/><sp/></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediumTime<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d-iteracion<sp/>%d<sp/>best-coste<sp/>%.10lf<sp/>evals<sp/>%.1ld<sp/>--<sp/>TIME<sp/>%.10lf<sp/>s<sp/>--<sp/>ftarget<sp/>%.20lf\n\n&quot;</highlight><highlight class="normal">,<sp/>idp,<sp/>k,<sp/>best,<sp/>evaluation_local,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(mediumTime<sp/>-<sp/>starttime)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC),<sp/>ftarget);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verboseiterationfortran_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ftarget,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation_local,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*par,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1-&gt;test.verbose<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="1171"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d-iteracion<sp/>%d<sp/>best-coste<sp/>%.20lf<sp/>evals<sp/>%ld<sp/>--<sp/>TIME<sp/>%lf<sp/>s<sp/>--<sp/>ftarget<sp/>%.20lf\n\n&quot;</highlight><highlight class="normal">,<sp/>*idp,<sp/>*k,<sp/>*best,<sp/>*evaluation_local,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*time,<sp/>*ftarget);<sp/><sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d-iteracion<sp/>%d<sp/>best-coste<sp/>%.20lf<sp/>evals<sp/>%ld<sp/>--<sp/>TIME<sp/>%lf<sp/>s<sp/>--<sp/>ftarget<sp/>%.20lf\n\n&quot;</highlight><highlight class="normal">,<sp/>*idp,<sp/>*k,<sp/>*best,<sp/>*evaluation_local,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*time,<sp/>*ftarget);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>concat_char(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*BUFFER,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string_eval_total,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>string_eval)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string_eval_total_aux;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len1,<sp/>len2;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>len1<sp/>=<sp/>strlen(string_eval_total);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>len2<sp/>=<sp/>strlen(string_eval);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BUFFER<sp/>&lt;<sp/><sp/>(len1<sp/>+<sp/>len2<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*BUFFER<sp/>=<sp/>len1*2<sp/>+<sp/>len2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total_aux<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc((len1*2<sp/>+<sp/>len2<sp/>+<sp/>1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(<sp/>string_eval_total_aux<sp/>,<sp/>string_eval_total<sp/>,<sp/>len1);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(<sp/>string_eval_total_aux+len1<sp/>,<sp/>string_eval<sp/>,<sp/>len2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>string_eval_total_aux;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total_aux<sp/>=<sp/>strcat(string_eval_total,(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>string_eval);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>string_eval_total_aux;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string_eval_total;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227" refid="output_8c_1a54380285235446c723a50c9f87e4c182" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a54380285235446c723a50c9f87e4c182" kindref="member" tooltip="this function generates a convergence MATLAB graph with the files of all slaves.">matlab_plot_file</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*color,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ancho_linea,<sp/><sp/></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*marca,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>par,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NPROC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,salir,init,<sp/>contador_puntos;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mfile;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*auxchar;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eval,<sp/>fx;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,<sp/>ls,<sp/>mi;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string_eval_total,<sp/>*string_fx_total,<sp/>*string_evalr_total,<sp/>*string_ls_total,<sp/>*string_mi_total;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string_eval,<sp/>*string_fx,<sp/>*string_evalr,<sp/>*string_mi,<sp/>*string_ls;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structline__reader" kindref="compound">line_reader</ref><sp/>lr;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>BIG_BUFFER<sp/>=<sp/>10000;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*p3,<sp/>*p4;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BUFFER1;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BUFFER2;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BUFFER3,BUFFER4,BUFFER5;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIZE_PATH;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contadorXXX;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*numberid;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER1=100;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER2=100;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER3=100;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER4=100;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER5=100;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE_PATH<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(string2,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(SIZE_PATH,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberid<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(100,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(numberid,</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,idp);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(path,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,strlen(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)-4-3-strlen(numberid));</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(<sp/>path,<sp/>mfile);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p4<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx_total<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER2+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER2+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER1+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER1+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr_total<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_mi<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_mi_total<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_ls<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_ls_total<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(BUFFER3+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr_init(&amp;lr,<sp/>p3);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>[<sp/>timeline<sp/>linebest<sp/>]<sp/>=<sp/>convergence()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>new_p<sp/>=<sp/>prev_interpol(x1,p1,xx);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>new_p<sp/>=<sp/>ones(length(xx),<sp/>1<sp/>);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>for<sp/>i=1:length(xx)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>find(x1==xx(i));\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(isempty(ind))<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>max(find(x1&lt;xx(i)));\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(isempty(ind)<sp/>)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_p(i)<sp/>=<sp/>unique(p1(1));\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_p(i)<sp/>=<sp/>unique(p1(ind));\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_p(i)<sp/>=<sp/>unique(p1(ind));\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>return\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>contador_puntos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>eval<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(salir<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>next_line(&amp;lr,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxchar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%lf,%lf,%d,%d,%d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(line,<sp/>auxchar,<sp/>&amp;eval,<sp/>&amp;fx,<sp/>&amp;iter,<sp/>&amp;ls,<sp/>&amp;mi);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((eval<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>fx<sp/>==<sp/>-1)<sp/>||<sp/>(salir<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>concat_char(&amp;BUFFER1,<sp/>string_eval_total,<sp/>string_eval);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_ls_total<sp/>=<sp/>concat_char(&amp;BUFFER1,<sp/>string_ls_total,<sp/>string_ls);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_mi_total<sp/>=<sp/>concat_char(&amp;BUFFER1,<sp/>string_mi_total,<sp/>string_mi);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx_total<sp/>=<sp/>concat_char(&amp;BUFFER2,<sp/>string_fx_total,<sp/>string_fx);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr_total<sp/>=<sp/>concat_char(&amp;BUFFER3,<sp/>string_evalr_total,<sp/>string_evalr);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>string_eval_total);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>string_mi_total);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>string_ls_total);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>string_fx_total);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>string_evalr_total);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador_puntos++;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr_total,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx_total,<sp/></highlight><highlight class="stringliteral">&quot;p%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval_total,<sp/></highlight><highlight class="stringliteral">&quot;x%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi_total,<sp/></highlight><highlight class="stringliteral">&quot;mi%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls_total,<sp/></highlight><highlight class="stringliteral">&quot;ls%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr_total,<sp/></highlight><highlight class="stringliteral">&quot;i%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx_total,<sp/></highlight><highlight class="stringliteral">&quot;p%d_%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1,<sp/>idp+1);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval_total,<sp/></highlight><highlight class="stringliteral">&quot;x%d_%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1,<sp/>idp+1);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_mi_total,<sp/></highlight><highlight class="stringliteral">&quot;mi%d_%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1,<sp/>idp+1);<sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_ls_total,<sp/></highlight><highlight class="stringliteral">&quot;ls%d_%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1,<sp/>idp+1);<sp/></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr_total,<sp/></highlight><highlight class="stringliteral">&quot;i%d_%d<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">,<sp/>contador_puntos+1,idp+1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_fx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%.20lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>fx);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_evalr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>iter);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ls<sp/>==<sp/>-1)<sp/>sprintf(string_ls,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sprintf(string_ls,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>ls);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ls<sp/>==<sp/>-1)<sp/>sprintf(string_mi,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sprintf(string_mi,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>mi);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string_eval,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%.20lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>eval);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>concat_char(&amp;BUFFER1,<sp/>string_eval_total,<sp/>string_eval);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_ls_total<sp/>=<sp/>concat_char(&amp;BUFFER5,<sp/>string_ls_total,<sp/>string_ls);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_mi_total<sp/>=<sp/>concat_char(&amp;BUFFER4,<sp/>string_mi_total,<sp/>string_mi);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx_total<sp/>=<sp/>concat_char(&amp;BUFFER2,<sp/>string_fx_total,<sp/>string_fx);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr_total<sp/>=<sp/>concat_char(&amp;BUFFER3,<sp/>string_evalr_total,<sp/>string_evalr);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval<sp/>=<sp/>-1;<sp/>fx<sp/>=<sp/>-1;<sp/>iter=-1;<sp/>ls<sp/>=<sp/>-1;<sp/>mi=-1;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!feof(p3))<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;next_line&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr_free(&amp;lr);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MPI2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1410"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;vector_TIME_RUN%d<sp/>=<sp/>[&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x%d_%d(length(x%d_%d))<sp/>&quot;</highlight><highlight class="normal">,<sp/>j<sp/>+<sp/>1,i,<sp/>j<sp/>+<sp/>1,i);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;vector_EVAL_RUN1<sp/>=<sp/>[&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>p%d_%d(length(p%d_%d))<sp/>&quot;</highlight><highlight class="normal">,<sp/>j<sp/>+<sp/>1,i,<sp/>j<sp/>+<sp/>1,i);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;VTR=%.20lf;\n&quot;</highlight><highlight class="normal">,<sp/>exp1.test.VTR);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;filter_FX<sp/>=<sp/>find(vector_EVAL_RUN%d&lt;=VTR);\n&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>(isempty(filter_FX))\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;[MIN_R,<sp/>ii_R]<sp/>=<sp/>min<sp/>(vector_TIME_RUN%d);\n&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;else\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;[MIN_R,<sp/>ii_R]<sp/>=<sp/>min<sp/>(vector_TIME_RUN%d(filter_FX));\n&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>=<sp/>find(vector_TIME_RUN%d<sp/>==<sp/>MIN_R);\n&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;MIN_RUN1<sp/>=<sp/>vector_TIME_RUN%d(index(1));\n&quot;</highlight><highlight class="normal">,<sp/>j+1);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;xx1_RUN%d<sp/>=<sp/>[&quot;</highlight><highlight class="normal">,j+1);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x%d_%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>j+1,i);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;xx2_RUN%d<sp/>=<sp/>unique(sort(xx1_RUN%d));\n&quot;</highlight><highlight class="normal">,j+1,j+1);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;indice_RUN%d<sp/>=<sp/>find(xx2_RUN%d==MIN_RUN%d);\n&quot;</highlight><highlight class="normal">,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;xx_RUN%d=<sp/>xx2_RUN%d(1:indice_RUN%d);\n&quot;</highlight><highlight class="normal">,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;pp_RUN%d<sp/>=<sp/>ones(%d,length(xx_RUN%d));\n&quot;</highlight><highlight class="normal">,<sp/>j+1,NPROC,j+1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contadorXXX=1;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pp_RUN%d(%d,:)<sp/>=<sp/>prev_interpol(x%d_%d,p%d_%d,xx_RUN%d);\n&quot;</highlight><highlight class="normal">,<sp/>j+1,contadorXXX,<sp/>j+1,i,j+1,i,j+1);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contadorXXX++;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>(size(pp_RUN1)<sp/>&gt;<sp/>1<sp/>)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;\t[<sp/>linpp_RUN%d,<sp/>ind_RUN%d<sp/>]<sp/>=<sp/>min(pp_RUN%d);\n&quot;</highlight><highlight class="normal">,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;else\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;\tlinpp_RUN1<sp/>=<sp/>pp_RUN1;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;end;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>contador_puntos;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%vector_ITE_RUN%d<sp/>=<sp/>[&quot;,<sp/>j+1);</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;<sp/>i%d_%d(length(i%d_%d))<sp/>&quot;,<sp/>j<sp/>+<sp/>1,i,<sp/>j<sp/>+<sp/>1,i);</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;];\n&quot;);</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%[MIN_R,<sp/>ii_R]<sp/>=<sp/>min<sp/>(vector_EVAL_RUN1);\n&quot;);</highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%index<sp/>=<sp/>find(vector_EVAL_RUN1<sp/>==<sp/>MIN_R);\n&quot;);</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%MIN_RUN1i<sp/>=<sp/>vector_ITE_RUN1(index(1));\n&quot;);</highlight></codeline>
<codeline lineno="1460"><highlight class="comment"></highlight></codeline>
<codeline lineno="1461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%ii1_RUN%d<sp/>=<sp/>[&quot;,j+1);</highlight></codeline>
<codeline lineno="1462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;<sp/>i%d_%d<sp/>&quot;,<sp/>j+1,i);</highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;];\n&quot;);</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%ii2_RUN%d<sp/>=<sp/>unique(sort(ii1_RUN%d));\n&quot;,j+1,j+1);</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%indice_RUN%di<sp/>=<sp/>find(ii2_RUN%d==MIN_RUN%di);\n&quot;,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%ii_RUN%d=<sp/>ii2_RUN%d(1:indice_RUN%di);\n&quot;,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%ppi_RUN%d<sp/>=<sp/>ones(%d,length(ii_RUN%d));\n&quot;,<sp/>j+1,NPROC,j+1);</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contadorXXX=1;</highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;<sp/>%%ppi_RUN%d(%d,:)<sp/>=<sp/>prev_interpol(i%d_%d,p%d_%d,ii_RUN%d);\n&quot;,<sp/>j+1,contadorXXX,<sp/>j+1,i,j+1,i,j+1);</highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contadorXXX++;</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="comment"></highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/>&quot;%%[<sp/>linppi_RUN%d,<sp/>indi_RUN%d<sp/>]<sp/>=<sp/>min(ii_RUN%d);\n&quot;,j+1,j+1,j+1);</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;timeline<sp/>=<sp/>xx_RUN1;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;linebest<sp/>=<sp/>linpp_RUN1;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>fprintf(p4,<sp/>&quot;%%timelineite<sp/>=<sp/>ii_RUN1;\n<sp/>timelineite<sp/>=<sp/>0<sp/>\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>fprintf(p4,<sp/>&quot;%%linebestite<sp/>=<sp/>linppi_RUN1;\n<sp/>linebestite<sp/>=<sp/>0\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;stairs(timeline,linebest,&apos;-r&apos;,&apos;LineWidth&apos;,2,&apos;Markersize&apos;,4);<sp/>hold<sp/>on;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>initp;<sp/>i<sp/>&lt;<sp/>NPROC+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;stairs(x%d_%d,p%d_%d,&apos;-k&apos;,&apos;LineWidth&apos;,2,&apos;Markersize&apos;,4);<sp/>hold<sp/>on;\n&quot;</highlight><highlight class="normal">,j+1,i,j+1,i);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;stairs(timeline,linebest,&apos;-r&apos;,&apos;LineWidth&apos;,2,&apos;Markersize&apos;,4);<sp/>hold<sp/>on;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp1.test.VTR<sp/>&gt;<sp/>0<sp/><sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;set(gca,<sp/>&apos;YScale&apos;,<sp/>&apos;log&apos;,&apos;XScale&apos;,<sp/>&apos;log&apos;,&apos;FontSize&apos;,12,&apos;TickDir&apos;,&apos;out&apos;,&apos;Box&apos;,&apos;On&apos;,&apos;LineWidth&apos;,2.0);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;set(gca,&apos;FontSize&apos;,12,&apos;TickDir&apos;,&apos;out&apos;,&apos;Box&apos;,&apos;On&apos;,&apos;LineWidth&apos;,2.0);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;title(&apos;Convergence<sp/>curves&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;xlabel(&apos;Wall-time<sp/>(s)&apos;,&apos;FontSize&apos;,12);<sp/><sp/>ylabel(&apos;f(x)&apos;,&apos;FontSize&apos;,12);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;hleg1<sp/>=<sp/>legend(&apos;minimum<sp/>value<sp/>in<sp/>all<sp/>runs&apos;,<sp/>&apos;slave<sp/>runs&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;\nend&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1501"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;timeline1<sp/>=<sp/>x1;\n&quot;</highlight><highlight class="normal">,NPROC);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;linebest1<sp/>=<sp/>p1;\n&quot;</highlight><highlight class="normal">,NPROC);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;\n\nend&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1505"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_eval);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_fx);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_fx_total);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_eval_total);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_evalr);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(string_evalr_total);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(path);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(numberid);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fx_total<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_evalr_total<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_eval_total<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p4);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberid<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542" refid="output_8c_1a55724ace6b0223bf52db02d683ea4ee1" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a55724ace6b0223bf52db02d683ea4ee1" kindref="member" tooltip="this function generates a gantt char with the gantt files of all slaves.">matlab_plot_file_gant</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stringpath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mfile;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*auxchar;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,OLDtime;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>state,<sp/>currentstate,<sp/>contador;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structline__reader" kindref="compound">line_reader</ref><sp/>lr;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>BIG_BUFFER<sp/>=<sp/>10000;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*p3,<sp/>*p4;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>salir,i;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(stringpath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1000,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(path,exp1.test.output_gant_log,strlen(exp1.test.output_gant_log)-4-4);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(<sp/>path,<sp/>mfile);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p4<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr_init(&amp;lr,<sp/>p3);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(salir<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>next_line(&amp;lr,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxchar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%lf,%d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(line,<sp/>auxchar,<sp/>&amp;time,<sp/>&amp;state);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((time<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>state<sp/>!=<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init1<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;clear<sp/>all;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;close<sp/>all;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;data<sp/>=<sp/>[<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init=1;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==1)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=2;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>OLDtime);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=3;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==2)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>OLDtime);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==3)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;<sp/>%lf<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLDtime=<sp/>time;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(contador<sp/>-<sp/><sp/>(maxsize))<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador<sp/>=<sp/>(maxsize)-contador;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;contador;i++)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;slots<sp/>=<sp/>data(:,1:end);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;linex=<sp/>[];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;liney=<sp/>[];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;for<sp/>i<sp/>=<sp/>length(slots(1,:)):-1:2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>line=[<sp/>];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>for<sp/>j<sp/>=<sp/>1:1:length(slots(:,1))\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>slots(j,i)<sp/>&gt;<sp/>0<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueprev<sp/>=<sp/>slots(j,i);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slots(j,i)<sp/>=<sp/>slots(j,i)-slots(j,i-1);<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>slots(j,i)<sp/>&gt;<sp/>0\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>mod(i,3)<sp/>==<sp/>1<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>i<sp/>~=<sp/>2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linex<sp/>=<sp/>[linex;<sp/>valueprev];\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>liney<sp/>=<sp/>[liney;<sp/>j];\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>end\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;end\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;linex=linex&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;liney=liney&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;figure\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;h<sp/>=<sp/>barh(slots,&apos;stacked&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;title(&apos;Visual<sp/>Logs&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;xlabel(&apos;Time&apos;,&apos;FontSize&apos;,25);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;ylabel(&apos;Processes&apos;,&apos;FontSize&apos;,25);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;set(gca,<sp/>&apos;YDir&apos;,<sp/>&apos;reverse&apos;,&apos;FontSize&apos;,25);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;set(h(1),<sp/>&apos;facecolor&apos;,<sp/>&apos;blue&apos;,<sp/>&apos;EdgeColor&apos;,<sp/>&apos;blue&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;for<sp/>i<sp/>=<sp/>2:3:(length(slots(1,:))-2)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>set(h(i),<sp/>&apos;facecolor&apos;,<sp/>&apos;cyan&apos;,<sp/>&apos;EdgeColor&apos;,<sp/>&apos;cyan&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>set(h(i+1),<sp/>&apos;facecolor&apos;,<sp/>&apos;green&apos;,<sp/>&apos;EdgeColor&apos;,<sp/>&apos;green&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>set(h(i+2),<sp/>&apos;facecolor&apos;,<sp/>&apos;red&apos;,<sp/>&apos;EdgeColor&apos;,<sp/>&apos;red&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;legend(h,&apos;init<sp/>stage&apos;,&apos;global<sp/>search&apos;,&apos;local<sp/>search&apos;,<sp/>&apos;communications&apos;);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;hold<sp/>on;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;plot(linex,liney,&apos;rs&apos;,&apos;MarkerSize&apos;,10,&apos;MarkerFaceColor&apos;,&apos;r&apos;,&apos;MarkerEdgeColor&apos;,<sp/>[0.5<sp/>0<sp/>0]);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;set(gcf,&apos;PaperPosition&apos;,[0<sp/>0<sp/>80<sp/>60]);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(path);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p4);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726" refid="output_8c_1a70a4ee926f202ec19934f92aabc8352f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a70a4ee926f202ec19934f92aabc8352f" kindref="member" tooltip="this function generates a percentage char with the percentege output files of all slaves...">matlab_plot_file_porcentage</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stringpath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idppar)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init1;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mfile;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*auxchar;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,fx,porcentage;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>contador;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structline__reader" kindref="compound">line_reader</ref><sp/>lr;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>BIG_BUFFER<sp/>=<sp/>10000;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*p3,<sp/>*p4;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>salir;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(stringpath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(500,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(path,exp1.test.log_percentage,strlen(exp1.test.log_percentage)-4);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(<sp/>path,<sp/>mfile);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p4<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr_init(&amp;lr,<sp/>p3);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>porcentage<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(salir<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>next_line(&amp;lr,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxchar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%lf,%lf,%lf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(line,<sp/>auxchar,<sp/>&amp;time,<sp/>&amp;fx,<sp/>&amp;porcentage);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((time<sp/>!=<sp/>-1.0<sp/>&amp;&amp;<sp/>porcentage<sp/>!=<sp/>-1.0<sp/>&amp;&amp;<sp/>fx<sp/>!=<sp/>-1.0))<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init1<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;porcent%d<sp/>=<sp/>[<sp/>%lf<sp/>%lf<sp/>%lf<sp/>;&quot;</highlight><highlight class="normal">,<sp/>idppar,<sp/>time,<sp/>fx,<sp/>porcentage);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init1=0;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,</highlight><highlight class="stringliteral">&quot;\n<sp/>%lf<sp/><sp/>%lf<sp/><sp/>%lf;&quot;</highlight><highlight class="normal">,<sp/>time,<sp/>fx,<sp/>porcentage);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>];&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;\n\ntime%d<sp/>=<sp/>porcent%d(:,1)&apos;;\n&quot;</highlight><highlight class="normal">,<sp/>idppar,<sp/>idppar);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;fx%d<sp/>=<sp/>porcent%d(:,2)&apos;;\n&quot;</highlight><highlight class="normal">,<sp/>idppar,<sp/>idppar);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;sizeporcent<sp/>=<sp/>size(porcent%d(:,2)&apos;)&apos;;\n&quot;</highlight><highlight class="normal">,<sp/>idppar);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;size%d=sizeporcent(2);\n&quot;</highlight><highlight class="normal">,<sp/>idppar);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;vector%d=1:size%d;\n&quot;</highlight><highlight class="normal">,<sp/>idppar,<sp/>idppar);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;porc%d<sp/>=<sp/>porcent%d(:,3)&apos;;\n&quot;</highlight><highlight class="normal">,<sp/>idppar,<sp/>idppar);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;figure;\n&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;bar(vector%d,porc%d);<sp/>hold<sp/>on;\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idppar,<sp/>idppar);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;title(&apos;Evolution<sp/>of<sp/>the<sp/>improvement<sp/>in<sp/>the<sp/>procesor<sp/>%d&apos;,&apos;FontSize&apos;,22);\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idppar);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;xlabel(&apos;Number<sp/>of<sp/>migration&apos;,&apos;FontSize&apos;,22);<sp/>\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;ylabel(&apos;Porcentage<sp/>of<sp/>improvement&apos;,&apos;FontSize&apos;,22);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;set(hleg1,&apos;FontSize&apos;,22);\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(p4,<sp/></highlight><highlight class="stringliteral">&quot;hold<sp/>off;<sp/>\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfree(path);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p4);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_count(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stringpath)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*auxchar;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>state,<sp/>currentstate,<sp/>contador;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structline__reader" kindref="compound">line_reader</ref><sp/>lr;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>BIG_BUFFER<sp/>=<sp/>10000;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*p3;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>salir;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>fopen(stringpath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p3<sp/>==<sp/>NULL)<sp/>exit(0);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr_init(&amp;lr,<sp/>p3);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(salir<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>next_line(&amp;lr,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxchar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%lf<sp/>%d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(line,<sp/>auxchar,<sp/>&amp;time,<sp/>&amp;state);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>salir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((time<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>state<sp/>!=<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init=1;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==1)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=2;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=3;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==2)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentstate==3)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentstate=1;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(p3);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((contador-1)<sp/>%<sp/>3<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contador<sp/>=<sp/>contador<sp/>+<sp/>(3-(contador-1)%3);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contador;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>varianze(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*array,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>suma;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;size;i++){</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>pow(array[i]-avg,2);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>suma<sp/>=<sp/>suma<sp/>/<sp/>(double)<sp/>(size-1);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suma;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>select_color(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>select_marca(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(int)<sp/>(i<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967" refid="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" kindref="member" tooltip="this function generate a convergence MATLAB graph with the files of all slaves.">plot_file</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>par,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NPROC)<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string,*string2,<sp/>*string3,<sp/>*string4,<sp/>*string5,<sp/>*string6;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vectstring,<sp/>*vectstring2,<sp/>*vectstring3;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f,i,end,init,maxsize_aux,maxsize;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="1976"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*color;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*marca;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>select_color(idp<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca[0]<sp/>=<sp/>select_marca(idp);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marca[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)<sp/>marca<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectstring<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,exp1.test.output_graph);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>100,<sp/>MPI_CHAR,<sp/>vectstring,<sp/>100,<sp/>MPI_CHAR,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string2,<sp/>&amp;vectstring[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>)<sp/>f=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>f=0;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>NPROC-1)<sp/>end=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>end=0;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a54380285235446c723a50c9f87e4c182" kindref="member" tooltip="this function generates a convergence MATLAB graph with the files of all slaves.">matlab_plot_file</ref>(exp1,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>string2,<sp/>&amp;color,<sp/>2,<sp/>&amp;marca,<sp/>1,<sp/>i-1,<sp/>NPROC-1,f,end,<sp/>0);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(string2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string2);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectstring);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(exp1.test.log_percentage);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string3<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectstring2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string3,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,exp1.test.output_gant_log);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string4<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(string3,<sp/>100,<sp/>MPI_CHAR,<sp/>vectstring2,<sp/>100,<sp/>MPI_CHAR,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string4,<sp/>&amp;vectstring2[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxsize_aux<sp/>=<sp/>row_count(string4);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxsize_aux<sp/>&gt;<sp/>maxsize)<sp/>maxsize<sp/>=<sp/>maxsize_aux;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string4,<sp/>&amp;vectstring2[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>init=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>init=0;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>(NPROC-1))<sp/>end=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>end=0;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a55724ace6b0223bf52db02d683ea4ee1" kindref="member" tooltip="this function generates a gantt char with the gantt files of all slaves.">matlab_plot_file_gant</ref>(exp1,<sp/>init,<sp/>end,<sp/>string4,maxsize);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(string4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string3);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string4);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectstring2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2047"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*color;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*marca;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a54380285235446c723a50c9f87e4c182" kindref="member" tooltip="this function generates a convergence MATLAB graph with the files of all slaves.">matlab_plot_file</ref>(exp1,exp1.test.output_graph,<sp/>exp1.test.output_graph,color,2,<sp/>marca,<sp/>0,<sp/>0,<sp/>NPROC,1,1,0);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(exp1.test.output_graph);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(color);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(marca);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074" refid="output_8c_1af4fb1023d4ddf652a5e703f951162ff1" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1af4fb1023d4ddf652a5e703f951162ff1" kindref="member" tooltip="this function manages the generation of the differents graphs.">plot_file_cess</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>exp1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>par,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NPROC)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*string,*string2,<sp/>*string3,<sp/>*string4,<sp/>*string5,<sp/>*string6;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vectstring,<sp/>*vectstring2,<sp/>*vectstring3;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize_aux,<sp/>maxsize;<sp/></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f,i,end,init;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="2082"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>color;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>marca;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>select_color(idp<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca<sp/>=<sp/>select_marca(idp);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marca<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)<sp/>marca<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectstring<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,exp1.test.output_graph);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>100,<sp/>MPI_CHAR,<sp/>vectstring,<sp/>100,<sp/>MPI_CHAR,<sp/>1,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string2,<sp/>&amp;vectstring[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1<sp/>)<sp/>f=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>f=0;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>NPROC-1)<sp/>end=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>end=0;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a54380285235446c723a50c9f87e4c182" kindref="member" tooltip="this function generates a convergence MATLAB graph with the files of all slaves.">matlab_plot_file</ref>(exp1,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>string2,<sp/>&amp;color,<sp/>2,<sp/>&amp;marca,<sp/>1,<sp/>i-1,<sp/>NPROC-1,f,end,<sp/>idp);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(string2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string2);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectstring);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">=NULL;<sp/>string2=NULL;<sp/>vectstring=NULL;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string5<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectstring3<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string5,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,exp1.test.log_percentage);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string6<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(string5,<sp/>100,<sp/>MPI_CHAR,<sp/>vectstring3,<sp/>100,<sp/>MPI_CHAR,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string6,<sp/>&amp;vectstring3[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end=1;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a70a4ee926f202ec19934f92aabc8352f" kindref="member" tooltip="this function generates a percentage char with the percentege output files of all slaves...">matlab_plot_file_porcentage</ref>(exp1,<sp/>end,<sp/>string6,<sp/>0);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(string6);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string5);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string6);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectstring3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string3<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectstring2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string3,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,exp1.test.output_gant_log);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string4<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(100*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(string3,<sp/>100,<sp/>MPI_CHAR,<sp/>vectstring2,<sp/>100,<sp/>MPI_CHAR,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string4,<sp/>&amp;vectstring2[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxsize_aux<sp/>=<sp/>row_count(string4);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxsize_aux<sp/>&gt;<sp/>maxsize)<sp/>maxsize<sp/>=<sp/>maxsize_aux;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(string4,<sp/>&amp;vectstring2[i*100],<sp/>100*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0)<sp/>init=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>init=0;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>(NPROC-1))<sp/>end=1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>end=0;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a55724ace6b0223bf52db02d683ea4ee1" kindref="member" tooltip="this function generates a gantt char with the gantt files of all slaves.">matlab_plot_file_gant</ref>(exp1,<sp/>init,<sp/>end,<sp/>string4,<sp/>maxsize);<sp/></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(string4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string3);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string4);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectstring2);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2167"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>color;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>marca;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>select_color(idp<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marca<sp/>=<sp/>select_marca(idp);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marca<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)<sp/>marca<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a54380285235446c723a50c9f87e4c182" kindref="member" tooltip="this function generates a convergence MATLAB graph with the files of all slaves.">matlab_plot_file</ref>(exp1,exp1.test.output_graph,<sp/>exp1.test.output_graph,&amp;color,2,<sp/>&amp;marca,<sp/>0,<sp/>0,<sp/>NPROC,1,1,0);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initoutputvars_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_){</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;point_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;point1=0;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;oldbest=DBL_MAX;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;st1=0.0;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;st2=0.0;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;st3=0.0;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateresultsandprint_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*totaltime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xbest)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp,<sp/>NPROC,<sp/>D;<sp/></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>indexvector;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>auxbest;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlocal__solver" kindref="compound">local_solver</ref><sp/>*local_s;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st3;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vectorbestx,*vectorbest,*bestglobalx,bestglobal;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>st3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/>idp<sp/>=<sp/>exp1-&gt;execution.idp;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>NPROC<sp/>=<sp/>exp1-&gt;execution.NPROC;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>exp1-&gt;test.bench.dim;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*)<sp/>result_;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/><sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>local_s<sp/>=<sp/>exp1-&gt;ls;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalL,<sp/>sucessL;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(local_s-&gt;total_local),<sp/>&amp;totalL,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(local_s-&gt;sucess_local),<sp/>&amp;sucessL,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(output-&gt;st3),<sp/>&amp;st3,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_s-&gt;total_local<sp/>=<sp/>totalL<sp/>/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_s-&gt;sucess_local<sp/>=<sp/>sucessL/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;st3<sp/>=<sp/>st3<sp/>/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(local_s-&gt;total_local),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(local_s-&gt;sucess_local),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(output-&gt;st3),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorbestx<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(NPROC*(D)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorbest<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>bestglobalx<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Gather(xbest,D,MPI_DOUBLE,vectorbestx,D,MPI_DOUBLE,0,exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Gather(fx,1,MPI_DOUBLE,vectorbest,1,MPI_DOUBLE,0,exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxbest<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexvector<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vectorbest[%d]-<sp/>%.20lf\n&quot;</highlight><highlight class="normal">,i,vectorbest[i]);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vectorbest[i]<sp/>&lt;<sp/>auxbest<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxbest<sp/>=<sp/>vectorbest[i];</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexvector<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestglobal=auxbest;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i++;i&lt;D)</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestglobalx[i]<sp/>=<sp/>vectorbestx[indexvector*(D)+i];<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(bestglobalx,<sp/>D,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;bestglobal,<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*result).best_value<sp/>&gt;=<sp/>bestglobal)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).best_value<sp/>=<sp/>bestglobal;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).time_value<sp/>=<sp/>(*result).time_value<sp/>+<sp/>*totaltime;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).eval_value<sp/>=<sp/>(*result).eval_value<sp/>+<sp/>*evaluation;<sp/><sp/></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_end_file_(exp1,bestglobalx,&amp;bestglobal,result);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectorbestx);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorbestx=NULL;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectorbest<sp/><sp/>);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorbest=NULL;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(bestglobalx<sp/><sp/>);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestglobalx=NULL;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).time_value<sp/>=<sp/>(*result).time_value<sp/>+<sp/>*totaltime;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).eval_value<sp/>=<sp/>(*result).eval_value<sp/>+<sp/>*evaluation;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_end_file_(exp1,xbest,fx,result);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*result).best_value<sp/>&gt;=<sp/>*fx)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).best_value<sp/>=<sp/>*fx;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2300"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320" refid="output_8c_1aa372305a3f4e17bdb2400b8c1915435f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1aa372305a3f4e17bdb2400b8c1915435f" kindref="member" tooltip="this function gathers the different results of all processors in the master, and then the master diff...">updateresultsess_</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*totaltime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evaluation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xbest,</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*totaliter,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*timevtr)<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idp,<sp/>NPROC,<sp/>D;<sp/></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>indexvector;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>auxbest;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__struct" kindref="compound">output_struct</ref><sp/>*output;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlocal__solver" kindref="compound">local_solver</ref><sp/>*local_s;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st3;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vectorbestx,*vectorbest,*bestglobalx,bestglobal;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fails;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(2);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>st3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>idp<sp/>=<sp/>exp1-&gt;execution.idp;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>NPROC<sp/>=<sp/>exp1-&gt;execution.NPROC;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>exp1-&gt;test.bench.dim;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*)<sp/>result_;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/><sp/>exp1-&gt;output;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>local_s<sp/>=<sp/>exp1-&gt;ls;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalL,<sp/>sucessL;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="2347"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(local_s-&gt;total_local),<sp/>&amp;totalL,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(local_s-&gt;sucess_local),<sp/>&amp;sucessL,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(output-&gt;st3),<sp/>&amp;st3,<sp/>1,<sp/>MPI_DOUBLE,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Reduce(&amp;(exp1-&gt;execution.failevals),<sp/>&amp;fails,<sp/>1,<sp/>MPI_LONG,<sp/>MPI_SUM,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1-&gt;execution.failevals<sp/>=<sp/>fails;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_s-&gt;total_local<sp/>=<sp/>totalL<sp/>/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_s-&gt;sucess_local<sp/>=<sp/>sucessL/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;st3<sp/>=<sp/>st3<sp/>/<sp/>(double)<sp/>NPROC;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(local_s-&gt;total_local),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(local_s-&gt;sucess_local),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(output-&gt;st3),<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;(exp1-&gt;execution.failevals),<sp/>1,<sp/>MPI_LONG,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorbestx<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(NPROC*(D)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorbest<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc(NPROC*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>bestglobalx<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((D)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Gather(xbest,D,MPI_DOUBLE,vectorbestx,D,MPI_DOUBLE,0,exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Gather(fx,1,MPI_DOUBLE,vectorbest,1,MPI_DOUBLE,0,exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result).iterations_value<sp/>=<sp/><sp/>*totaliter;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result).time_vtr_value<sp/>=<sp/>*timevtr;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxbest<sp/>=<sp/>vectorbest[0];</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexvector<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;NPROC;i++)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vectorbest[i]<sp/>&lt;<sp/>auxbest<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxbest<sp/>=<sp/>vectorbest[i];</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexvector<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestglobal=auxbest;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(bestglobalx,&amp;vectorbestx[indexvector*(D)],D*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(bestglobalx,<sp/>D,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(&amp;bestglobal,<sp/>1,<sp/>MPI_DOUBLE,<sp/>0,<sp/>exp1-&gt;execution.topology.comunicator);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*result).best_value<sp/>&gt;=<sp/>bestglobal)<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).best_value<sp/>=<sp/>bestglobal;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).time_value<sp/>=<sp/>(*result).time_value<sp/>+<sp/>*totaltime;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).eval_value<sp/>=<sp/>(*result).eval_value<sp/>+<sp/>*evaluation;<sp/><sp/></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_end_file_(exp1,bestglobalx,&amp;bestglobal,result);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(2);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Barrier(MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(result-&gt;bestx_value,<sp/>bestglobalx,<sp/>D*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectorbestx);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorbestx=NULL;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vectorbest);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorbest=NULL;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(bestglobalx);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestglobalx=NULL;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="2413"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).time_value<sp/>=<sp/>(*result).time_value<sp/>+<sp/>*totaltime;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).eval_value<sp/>=<sp/>(*result).eval_value<sp/>+<sp/>*evaluation;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).iterations_value<sp/>=<sp/>(double)<sp/>*totaliter;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).time_vtr_value<sp/>=<sp/>(int)<sp/>*timevtr;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_end_file_(exp1,xbest,fx,result);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*result).best_value<sp/>&gt;=<sp/>*fx)<sp/>{</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*result).best_value<sp/>=<sp/>*fx;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2426"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>updateresultsrandomsearch_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*evaluation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*best<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*result;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>*)<sp/>result_;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result).time_value<sp/>=<sp/>(*result).time_value<sp/>+<sp/>*totaltime;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result).eval_value<sp/>=<sp/>(*result).eval_value<sp/>+<sp/>*evaluation;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result).best_value<sp/>=<sp/>*best;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_message(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NPROC,<sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NTHREAD)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*namealg,*nameversionalg,*nametopologyalg,*namels;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idsolver;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>idsolver<sp/>=<sp/>getnumversion(exp);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>namealg<sp/><sp/>=<sp/>getname(exp);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>nameversionalg<sp/>=<sp/>getversioness(idsolver);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>nametopologyalg<sp/>=<sp/>gettopologyess(idsolver);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>namels<sp/>=<sp/>getlsess(exp);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n=====================================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;==<sp/>PARALLEL<sp/>SACESS<sp/>OPTIMIZATION<sp/>LIBRARY<sp/>=============\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;=====================================================\n\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;************<sp/>GENERAL<sp/>INFORMATION<sp/>********************\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*<sp/>SOLVER<sp/>::<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>namealg);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Version<sp/>solver<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>nameversionalg);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Topology<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>nametopologyalg);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Max.Evals<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%.1lf\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.max_eval<sp/>);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Max.Time(s)<sp/><sp/><sp/><sp/>:<sp/>%.1lf\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.maxtime<sp/>);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exp[0].test.local_search<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Local<sp/>Solver<sp/><sp/><sp/>:<sp/>none\n\n&quot;</highlight><highlight class="normal">,<sp/>namels);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Local<sp/>Solver<sp/><sp/><sp/>:<sp/>%s\n\n&quot;</highlight><highlight class="normal">,<sp/>namels);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*<sp/>TOTAL<sp/>PROCESSORS<sp/>USED<sp/>::<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>NPROC*NTHREAD);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>MPI<sp/>proc.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>NPROC);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>openMP<sp/>threads<sp/>per<sp/>proc.<sp/>:<sp/>%d\n\n&quot;</highlight><highlight class="normal">,<sp/>NTHREAD);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bechmark_message(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*<sp/>TYPE<sp/>OF<sp/>BENCKMARK<sp/>::<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.bench.type<sp/>);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>parameters<sp/><sp/><sp/><sp/><sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.bench.dim);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Value<sp/>To<sp/>Reach<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%.10lf\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.VTR);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>[DEFAULT]<sp/>Value<sp/>To<sp/>Reach<sp/>:<sp/>%.10lf\n\n&quot;</highlight><highlight class="normal">,<sp/>(*exp).test.VTR_default);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;************<sp/>SLAVE<sp/>INFORMATION<sp/>********************\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graphs_message(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp)<sp/>{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idsolver;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m1,*m2,*m3;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>m1=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(20,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m1));</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>m2=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(20,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m2));</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>m3=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>calloc(20,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m3));</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n************<sp/>GRAPHS<sp/>GENERATED<sp/>***********************\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(m1,exp-&gt;test.output_graph,strlen(exp-&gt;test.output_graph));</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>GRAPH<sp/>PATH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>m1);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>CONVERGENCE<sp/>GRAPH<sp/>MATLAB<sp/>:<sp/>%s/convergence.m\n&quot;</highlight><highlight class="normal">,<sp/>m1);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>CONVERGENCE<sp/>GRAPHs<sp/>CSV<sp/><sp/><sp/>:<sp/>%s/convergence_id*.csv\n&quot;</highlight><highlight class="normal">,<sp/>m1);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2509"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>idsolver<sp/>=<sp/>getnumversion(exp);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(m2,exp-&gt;test.output_gant_log,strlen(exp-&gt;test.output_gant_log)-5);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>GANTT<sp/>CHART<sp/>MATLAB<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%s0.m\n&quot;</highlight><highlight class="normal">,<sp/>m2);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>GANTT<sp/>CHARTs<sp/>CSV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%s*.csv\n&quot;</highlight><highlight class="normal">,<sp/>m2);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idsolver<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(m3,exp-&gt;test.log_percentage,strlen(exp-&gt;test.log_percentage)-4);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>PERCENTAGE<sp/>GRAPH<sp/>MATLAB<sp/><sp/>:<sp/>%s.m\n&quot;</highlight><highlight class="normal">,<sp/>m3);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>PERCENTAGE<sp/>GRAPH<sp/>CSV<sp/><sp/><sp/><sp/><sp/>:<sp/>%s.csv\n\n\n&quot;</highlight><highlight class="normal">,<sp/>m3);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2520"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cfree(m1);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>cfree(m2);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>cfree(m3);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printresults_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fx,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*evals,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*timeVTR,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*iter)<sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;-<sp/>fx<sp/>evals<sp/>totaltime<sp/>timeVTR<sp/>iter<sp/>evalfails\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;tab<sp/>%.20f<sp/>%ld<sp/>%lf<sp/>%lf<sp/>%lf<sp/>%ld\n&quot;,<sp/>*fx,<sp/>*evals,<sp/>*totaltime,<sp/>*timeVTR,<sp/>*iter,<sp/>exp1-&gt;execution.failevals);<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printstatemaster_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*BKS,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*time){</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[MASTER]<sp/>Best<sp/>Known<sp/>Solution<sp/>fx<sp/>=<sp/>%.10lf<sp/>--<sp/>CURRENT<sp/>TIME<sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>*BKS,<sp/>*time);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printresults_end(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exptotal,<sp/><ref refid="structresult__solver" kindref="compound">result_solver</ref><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.time_vtr_value<sp/>==<sp/>DBL_MAX<sp/>)</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nTOTAL<sp/>TIME<sp/>TO<sp/>REACH<sp/>VTR<sp/>:<sp/>not<sp/>reach\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nTOTAL<sp/>TIME<sp/>TO<sp/>REACH<sp/>VTR<sp/>:<sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>result.time_vtr_value);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;TOTAL<sp/>EVALUATIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>result.eval_value);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;AVERAGE<sp/>ITERATIONS<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>result.iterations_value);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;EVALUATION<sp/>FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>exptotal-&gt;execution.failevals);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.time_vtr_value<sp/>==<sp/>DBL_MAX<sp/>){</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nf-%d<sp/>DIM<sp/>%d<sp/>fbest:<sp/>%.20lf<sp/>&lt;<sp/>ftarget<sp/>%.20lf<sp/>numevals<sp/>(%ld)<sp/>--<sp/>time<sp/>VTR<sp/>-&gt;<sp/>not<sp/>reach<sp/>--<sp/>iter<sp/>%lf\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.bench.current_bench,</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.bench.dim,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.best_value,</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.VTR,</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.eval_value,</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.iterations_value);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nf-%d<sp/>DIM<sp/>%d<sp/>fbest:<sp/>%.20lf<sp/>&lt;<sp/>ftarget<sp/>%.20lf<sp/>numevals<sp/>(%ld)<sp/>--<sp/>time<sp/>VTR<sp/>-&gt;<sp/>%lf<sp/>--<sp/>iter<sp/>%lf\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.bench.current_bench,</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.bench.dim,</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.best_value,</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exptotal[0].test.VTR,</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.eval_value,</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.time_vtr_value,</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.iterations_value);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577" refid="output_8c_1a5d8bb67710fcaa8ed1fcbc7acb3fbfa8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="output_8c_1a5d8bb67710fcaa8ed1fcbc7acb3fbfa8" kindref="member" tooltip="this function generate a convergence MATLAB graph with the files of all slaves.">plot</ref>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exptotal)<sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NPROC,id;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idsolver;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exptotal-&gt;test.output<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idsolver<sp/>=<sp/>getnumversion(exptotal);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPROC=1;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=0;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MPI2</highlight></codeline>
<codeline lineno="2586"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Comm_size(MPI_COMM_WORLD,<sp/>&amp;NPROC);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Comm_rank(MPI_COMM_WORLD,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*exptotal).methodScatterSearch<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((idsolver<sp/>==<sp/>1<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(idsolver<sp/>==<sp/>3)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1af4fb1023d4ddf652a5e703f951162ff1" kindref="member" tooltip="this function manages the generation of the differents graphs.">plot_file_cess</ref>(*exptotal,<sp/>1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>NPROC);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" kindref="member" tooltip="this function generate a convergence MATLAB graph with the files of all slaves.">plot_file</ref>(*exptotal,<sp/>1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>NPROC);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" kindref="member" tooltip="this function generate a convergence MATLAB graph with the files of all slaves.">plot_file</ref>(*exptotal,<sp/>1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>NPROC);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="2604"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="output_8c_1a844cd7fbeac06e27c8ae51d1efbee265" kindref="member" tooltip="this function generate a convergence MATLAB graph with the files of all slaves.">plot_file</ref>(*exptotal,<sp/>0,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2606"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/output/output.c"/>
  </compounddef>
</doxygen>
