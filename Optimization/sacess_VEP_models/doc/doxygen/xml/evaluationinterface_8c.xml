<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="evaluationinterface_8c" kind="file">
    <compoundname>evaluationinterface.c</compoundname>
    <includes refid="structure__paralleltestbed_8h" local="no">structure_paralleltestbed.h</includes>
    <includes refid="configuration_8h" local="no">configuration.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes refid="def__errors_8h" local="no">def_errors.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="common__solver__operations_8h" local="no">common_solver_operations.h</includes>
    <includes refid="solversinterface_8h" local="no">solversinterface.h</includes>
    <incdepgraph>
      <node id="285">
        <label>float.h</label>
      </node>
      <node id="273">
        <label>structure_paralleltestbed.h</label>
        <link refid="structure__paralleltestbed_8h_source"/>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>stdlib.h</label>
      </node>
      <node id="272">
        <label>src/method_module/evaluationinterface.c</label>
        <link refid="evaluationinterface.c"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="288">
        <label>solversinterface.h</label>
        <link refid="solversinterface_8h_source"/>
      </node>
      <node id="279">
        <label>configuration.h</label>
        <link refid="configuration_8h_source"/>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
      </node>
      <node id="287">
        <label>common_solver_operations.h</label>
        <link refid="common__solver__operations_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="283">
        <label>string.h</label>
      </node>
      <node id="278">
        <label>time.h</label>
      </node>
      <node id="280">
        <label>math.h</label>
      </node>
      <node id="286">
        <label>def_errors.h</label>
        <link refid="def__errors_8h_source"/>
      </node>
      <node id="281">
        <label>sys/time.h</label>
      </node>
      <node id="277">
        <label>gsl/gsl_randist.h</label>
      </node>
      <node id="276">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="275">
        <label>AMIGO_problem.h</label>
      </node>
      <node id="274">
        <label>bbobStructures.h</label>
      </node>
      <node id="284">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="evaluationinterface_8c_1a462d9abc013ac1141636a4ca6fa562ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DE_correction_bounds</definition>
        <argsstring>(double *X, int D, double *Xl, double *Xu)</argsstring>
        <name>DE_correction_bounds</name>
        <param>
          <type>double *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="22" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="22" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1a07ed6b58069566e8d4c139519dcaea7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DE_correction_bounds2</definition>
        <argsstring>(double *X, int D, double *Xl, double *Xu)</argsstring>
        <name>DE_correction_bounds2</name>
        <param>
          <type>double *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="39" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="39" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1ac3b305de6f056dfdb31d0fb89a38b740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double callfitnessfunction_</definition>
        <argsstring>(void *(*fitnessfunction)(double *, void *), void *exp1_, double *U, int *D, double *Xl, double *Xm)</argsstring>
        <name>callfitnessfunction_</name>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>fitnessfunction</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="58" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="58" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1af7e99aeb165986ead5dc5b9d97d8caeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translation</definition>
        <argsstring>(double *X, double *transconst, int size)</argsstring>
        <name>translation</name>
        <param>
          <type>double *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>transconst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="86" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="86" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1acc04f372592a136503f8bd85f37f38ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void detranslation</definition>
        <argsstring>(double *X, double *transconst, int size)</argsstring>
        <name>detranslation</name>
        <param>
          <type>double *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>transconst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="96" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="96" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1a148306d0b410d88ac2e256e3a91e5896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void detranslationinterface_</definition>
        <argsstring>(double *U, void *exp1_)</argsstring>
        <name>detranslationinterface_</name>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="106" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1a64434b7c3ce9543c738e8a0dd159763e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double callfitnessfunctionfortran_</definition>
        <argsstring>(void *(*fitnessfunction)(double *, void *), void *exp1_, double *U, int *D, double *Xl, double *Xm, double *nlc)</argsstring>
        <name>callfitnessfunctionfortran_</name>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>fitnessfunction</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nlc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="117" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="117" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1ad8c8960b45be90f7bf1f7ddc675a52a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double callfitnessfunctionfortranopenmp_</definition>
        <argsstring>(void *(*fitnessfunction)(double *, void *), void *exp1_, double *U, int *D, double *Xl, double *Xm, double *nlc, int *idp)</argsstring>
        <name>callfitnessfunctionfortranopenmp_</name>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>fitnessfunction</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nlc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="153" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="152" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1acb416ab7d7cabc1022ed3b2bdb552186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double callfitnessfunctionfortranopenmp2_</definition>
        <argsstring>(void *(*fitnessfunction)(double *, void *), void *exp1_, double *U, double *nlc, int *idp)</argsstring>
        <name>callfitnessfunctionfortranopenmp2_</name>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>fitnessfunction</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nlc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="192" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="192" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="evaluationinterface_8c_1a24b850380d4c9ee0912af4a32e4f44f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double callfitnessfunctionopenmp_</definition>
        <argsstring>(void *(*fitnessfunction)(double *, void *), void *exp1_, double *U, int *D, double *Xl, double *Xm, int *idp)</argsstring>
        <name>callfitnessfunctionopenmp_</name>
        <param>
          <type>void *(*)(double *, void *)</type>
          <declname>fitnessfunction</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>exp1_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Xm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" line="225" bodyfile="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c" bodystart="225" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing functions about the evaluation of objective function. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David R. Penas </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#include<sp/>&lt;structure_paralleltestbed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;configuration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;def_errors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;configuration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;common_solver_operations.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;solversinterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DE_correction_bounds(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Xu)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Xl[i]<sp/>==<sp/>Xu[i])<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>Xl[i];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(X[i]<sp/>&lt;<sp/>Xl[i]<sp/>||<sp/>X[i]<sp/>&gt;<sp/>Xu[i])<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X[i]<sp/>&lt;<sp/>Xl[i])<sp/>X[i]<sp/>=<sp/>2.0<sp/>*<sp/>Xl[i]<sp/>-<sp/>X[i];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X[i]<sp/>&gt;<sp/>Xu[i])<sp/>X[i]<sp/>=<sp/>2.0<sp/>*<sp/>Xu[i]<sp/>-<sp/>X[i];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DE_correction_bounds2(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Xu)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Xl[i]<sp/>==<sp/>Xu[i])<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>Xl[i];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X[i]<sp/>&lt;<sp/>Xl[i])<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>Xl[i];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X[i]<sp/>&gt;<sp/>Xu[i])<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>Xu[i];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>callfitnessfunction_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fitnessfunction)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*res;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structoutput__function" kindref="compound">output_function</ref>));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>DE_correction_bounds(U,<sp/>*D,<sp/>Xl,<sp/>Xm);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test._log<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converttonormal_(U,<sp/>D);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>fitnessfunction(U,<sp/><sp/>&amp;(exp1[0])<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>U[*D]<sp/>=<sp/>res-&gt;value;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[0].test._log<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converttolog_(U,<sp/>D);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>free(res);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U[*D];<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>translation(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*transconst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;size;i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>transconst[i]<sp/>!=<sp/>0.0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>X[i]<sp/>+<sp/>transconst[i];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detranslation(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*transconst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;size;i++)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>transconst[i]<sp/>!=<sp/>0.0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>X[i]<sp/>-<sp/>transconst[i];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detranslationinterface_(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>detranslation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>callfitnessfunctionfortran_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fitnessfunction)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*nlc)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*res;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structoutput__function" kindref="compound">output_function</ref>));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>DE_correction_bounds2(U,<sp/>*D,<sp/>Xl,<sp/>Xm);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>detranslation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>fitnessfunction(U,<sp/>&amp;<sp/>(exp1[0])<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res-&gt;g<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;exp1[0].methodScatterSearch-&gt;ineq;i++)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlc[i]<sp/>=<sp/>res-&gt;g[i];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>translation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>res-&gt;value;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>free(res);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>res=NULL;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>callfitnessfunctionfortranopenmp_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fitnessfunction)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*nlc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*res;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>DE_correction_bounds2(U,<sp/>*D,<sp/>Xl,<sp/>Xm);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detranslation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>fitnessfunction(U,<sp/>&amp;(exp1[*idp]));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res-&gt;g<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;exp1[0].methodScatterSearch-&gt;ineq;i++)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlc[i]<sp/>=<sp/>res-&gt;g[i];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/>translation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>value=res-&gt;value;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>free(res);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>callfitnessfunctionfortranopenmp2_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fitnessfunction)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*nlc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*res;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/><sp/>detranslation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>fitnessfunction(U,<sp/>&amp;(exp1[*idp]));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res-&gt;g<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;exp1[0].methodScatterSearch-&gt;ineq;i++)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlc[i]<sp/>=<sp/>res-&gt;g[i];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(exp1-&gt;test.bench.translation<sp/>==<sp/>1)<sp/><sp/>translation(<sp/>U,<sp/>exp1-&gt;execution.transconst,<sp/>exp1-&gt;test.bench.dim<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>value=res-&gt;value;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>free(res);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>callfitnessfunctionopenmp_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fitnessfunction)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*exp1_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Xm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idp)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*res;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structoutput__function" kindref="compound">output_function</ref>)<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*exp1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>exp1<sp/>=<sp/>(<ref refid="structexperiment__total" kindref="compound">experiment_total</ref><sp/>*)<sp/>exp1_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>DE_correction_bounds(U,<sp/>*D,<sp/>Xl,<sp/>Xm);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[*idp].test._log<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converttonormal_(U,<sp/>D);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(<ref refid="structoutput__function" kindref="compound">output_function</ref><sp/>*)<sp/>fitnessfunction(U,<sp/>&amp;(exp1[*idp]));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>U[*D]<sp/>=<sp/>res-&gt;value;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp1[*idp].test._log<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converttolog_(U,<sp/>D);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>free(res);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U[*D];<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/traballos/paralleltestbed/REPO_GIT/REPOSITORIO/SACESS_TOOLS/src/method_module/evaluationinterface.c"/>
  </compounddef>
</doxygen>
